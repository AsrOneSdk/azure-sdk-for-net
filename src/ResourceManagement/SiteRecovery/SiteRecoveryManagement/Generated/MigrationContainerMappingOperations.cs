// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of migration container mapping operations for the Site
    /// Recovery extension.
    /// </summary>
    internal partial class MigrationContainerMappingOperations : IServiceOperations<SiteRecoveryManagementClient>, IMigrationContainerMappingOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MigrationContainerMappingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MigrationContainerMappingOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a migration container mapping.
        /// </summary>
        /// <param name='migrationFabricName'>
        /// Required. Migration fabric name.
        /// </param>
        /// <param name='migrationContainerName'>
        /// Required. Migration container name.
        /// </param>
        /// <param name='migrationContainerMappingName'>
        /// Required. Migration container mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create migration container mapping.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreateAsync(string migrationFabricName, string migrationContainerName, string migrationContainerMappingName, MigrationContainerMappingCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (migrationFabricName == null)
            {
                throw new ArgumentNullException("migrationFabricName");
            }
            if (migrationContainerName == null)
            {
                throw new ArgumentNullException("migrationContainerName");
            }
            if (migrationContainerMappingName == null)
            {
                throw new ArgumentNullException("migrationContainerMappingName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("migrationFabricName", migrationFabricName);
                tracingParameters.Add("migrationContainerName", migrationContainerName);
                tracingParameters.Add("migrationContainerMappingName", migrationContainerMappingName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationMigrationFabrics/";
            url = url + Uri.EscapeDataString(migrationFabricName);
            url = url + "/replicationMigrationContainers/";
            url = url + Uri.EscapeDataString(migrationContainerName);
            url = url + "/replicationMigrationContainerMappings/";
            url = url + Uri.EscapeDataString(migrationContainerMappingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject migrationContainerMappingCreationInputValue = new JObject();
                requestDoc = migrationContainerMappingCreationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    migrationContainerMappingCreationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.PolicyName != null)
                    {
                        propertiesValue["policyName"] = input.Properties.PolicyName;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is VMwareCbtMigrationContainerMappingCreationInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareCbt";
                            VMwareCbtMigrationContainerMappingCreationInput derived = ((VMwareCbtMigrationContainerMappingCreationInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.KeyVaultId != null)
                            {
                                providerSpecificDetailsValue["keyVaultId"] = derived.KeyVaultId;
                            }
                            
                            if (derived.KeyVaultUri != null)
                            {
                                providerSpecificDetailsValue["keyVaultUri"] = derived.KeyVaultUri;
                            }
                            
                            if (derived.StorageAccountId != null)
                            {
                                providerSpecificDetailsValue["storageAccountId"] = derived.StorageAccountId;
                            }
                            
                            if (derived.StorageAccountSasSecretName != null)
                            {
                                providerSpecificDetailsValue["storageAccountSasSecretName"] = derived.StorageAccountSasSecretName;
                            }
                            
                            if (derived.ServiceBusConnectionStringSecretName != null)
                            {
                                providerSpecificDetailsValue["serviceBusConnectionStringSecretName"] = derived.ServiceBusConnectionStringSecretName;
                            }
                            
                            if (derived.TargetLocation != null)
                            {
                                providerSpecificDetailsValue["targetLocation"] = derived.TargetLocation;
                            }
                            
                            if (derived.InstanceType != null)
                            {
                                providerSpecificDetailsValue["instanceType"] = derived.InstanceType;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a migration container mapping.
        /// </summary>
        /// <param name='migrationFabricName'>
        /// Required. Migration fabric name.
        /// </param>
        /// <param name='migrationContainerName'>
        /// Required. Migration container name.
        /// </param>
        /// <param name='migrationContainerMappingName'>
        /// Required. Migration container mapping name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create migration container mapping.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(string migrationFabricName, string migrationContainerName, string migrationContainerMappingName, MigrationContainerMappingCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("migrationFabricName", migrationFabricName);
                tracingParameters.Add("migrationContainerName", migrationContainerName);
                tracingParameters.Add("migrationContainerMappingName", migrationContainerMappingName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationContainerMapping.BeginCreateAsync(migrationFabricName, migrationContainerName, migrationContainerMappingName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationContainerMappingOperationResponse result = await client.MigrationContainerMapping.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationContainerMapping.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the migration container mapping by Id.
        /// </summary>
        /// <param name='migrationFabricName'>
        /// Required. Migration fabric name.
        /// </param>
        /// <param name='migrationContainerName'>
        /// Required. Migration container name.
        /// </param>
        /// <param name='migrationContainerMappingName'>
        /// Required. Migration container mapping name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the migration container mapping.
        /// </returns>
        public async Task<MigrationContainerMappingResponse> GetAsync(string migrationFabricName, string migrationContainerName, string migrationContainerMappingName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (migrationFabricName == null)
            {
                throw new ArgumentNullException("migrationFabricName");
            }
            if (migrationContainerName == null)
            {
                throw new ArgumentNullException("migrationContainerName");
            }
            if (migrationContainerMappingName == null)
            {
                throw new ArgumentNullException("migrationContainerMappingName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("migrationFabricName", migrationFabricName);
                tracingParameters.Add("migrationContainerName", migrationContainerName);
                tracingParameters.Add("migrationContainerMappingName", migrationContainerMappingName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationMigrationFabrics/";
            url = url + Uri.EscapeDataString(migrationFabricName);
            url = url + "/replicationMigrationContainers/";
            url = url + Uri.EscapeDataString(migrationContainerName);
            url = url + "/replicationMigrationContainerMappings/";
            url = url + Uri.EscapeDataString(migrationContainerMappingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationContainerMappingResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationContainerMappingResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationContainerMapping migrationContainerMappingInstance = new MigrationContainerMapping();
                            result.MigrationContainerMapping = migrationContainerMappingInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationContainerMappingProperties propertiesInstance = new MigrationContainerMappingProperties();
                                migrationContainerMappingInstance.Properties = propertiesInstance;
                                
                                JToken sourceMigrationContainerFriendlyNameValue = propertiesValue["sourceMigrationContainerFriendlyName"];
                                if (sourceMigrationContainerFriendlyNameValue != null && sourceMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string sourceMigrationContainerFriendlyNameInstance = ((string)sourceMigrationContainerFriendlyNameValue);
                                    propertiesInstance.SourceMigrationContainerFriendlyName = sourceMigrationContainerFriendlyNameInstance;
                                }
                                
                                JToken targetMigrationContainerIdValue = propertiesValue["targetMigrationContainerId"];
                                if (targetMigrationContainerIdValue != null && targetMigrationContainerIdValue.Type != JTokenType.Null)
                                {
                                    string targetMigrationContainerIdInstance = ((string)targetMigrationContainerIdValue);
                                    propertiesInstance.TargetMigrationContainerId = targetMigrationContainerIdInstance;
                                }
                                
                                JToken targetMigrationContainerFriendlyNameValue = propertiesValue["targetMigrationContainerFriendlyName"];
                                if (targetMigrationContainerFriendlyNameValue != null && targetMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string targetMigrationContainerFriendlyNameInstance = ((string)targetMigrationContainerFriendlyNameValue);
                                    propertiesInstance.TargetMigrationContainerFriendlyName = targetMigrationContainerFriendlyNameInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken sourceFabricFriendlyNameValue = propertiesValue["sourceFabricFriendlyName"];
                                if (sourceFabricFriendlyNameValue != null && sourceFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string sourceFabricFriendlyNameInstance = ((string)sourceFabricFriendlyNameValue);
                                    propertiesInstance.SourceFabricFriendlyName = sourceFabricFriendlyNameInstance;
                                }
                                
                                JToken targetFabricFriendlyNameValue = propertiesValue["targetFabricFriendlyName"];
                                if (targetFabricFriendlyNameValue != null && targetFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string targetFabricFriendlyNameInstance = ((string)targetFabricFriendlyNameValue);
                                    propertiesInstance.TargetFabricFriendlyName = targetFabricFriendlyNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationContainerMappingDetails vMwareCbtMigrationContainerMappingDetailsInstance = new VMwareCbtMigrationContainerMappingDetails();
                                        
                                        JToken keyVaultIdValue = providerSpecificDetailsValue["keyVaultId"];
                                        if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                        {
                                            string keyVaultIdInstance = ((string)keyVaultIdValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                        }
                                        
                                        JToken keyVaultUriValue = providerSpecificDetailsValue["keyVaultUri"];
                                        if (keyVaultUriValue != null && keyVaultUriValue.Type != JTokenType.Null)
                                        {
                                            string keyVaultUriInstance = ((string)keyVaultUriValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultUri = keyVaultUriInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountSasSecretNameValue = providerSpecificDetailsValue["storageAccountSasSecretName"];
                                        if (storageAccountSasSecretNameValue != null && storageAccountSasSecretNameValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountSasSecretNameInstance = ((string)storageAccountSasSecretNameValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountSasSecretName = storageAccountSasSecretNameInstance;
                                        }
                                        
                                        JToken serviceBusConnectionStringSecretNameValue = providerSpecificDetailsValue["serviceBusConnectionStringSecretName"];
                                        if (serviceBusConnectionStringSecretNameValue != null && serviceBusConnectionStringSecretNameValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusConnectionStringSecretNameInstance = ((string)serviceBusConnectionStringSecretNameValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.ServiceBusConnectionStringSecretName = serviceBusConnectionStringSecretNameInstance;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken roleSizeToNicCountMapSequenceElement = ((JToken)providerSpecificDetailsValue["roleSizeToNicCountMap"]);
                                        if (roleSizeToNicCountMapSequenceElement != null && roleSizeToNicCountMapSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in roleSizeToNicCountMapSequenceElement)
                                            {
                                                string roleSizeToNicCountMapKey = ((string)property.Name);
                                                int roleSizeToNicCountMapValue = ((int)property.Value);
                                                vMwareCbtMigrationContainerMappingDetailsInstance.RoleSizeToNicCountMap.Add(roleSizeToNicCountMapKey, roleSizeToNicCountMapValue);
                                            }
                                        }
                                        
                                        JToken excludedSkusArray = providerSpecificDetailsValue["excludedSkus"];
                                        if (excludedSkusArray != null && excludedSkusArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedSkusValue in ((JArray)excludedSkusArray))
                                            {
                                                vMwareCbtMigrationContainerMappingDetailsInstance.ExcludedSkus.Add(((string)excludedSkusValue));
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationContainerMappingDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationContainerMappingInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationContainerMappingInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationContainerMappingInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationContainerMappingInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    migrationContainerMappingInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration container mapping operation.
        /// </returns>
        public async Task<MigrationContainerMappingOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationContainerMappingOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationContainerMappingOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationContainerMapping migrationContainerMappingInstance = new MigrationContainerMapping();
                            result.MigrationContainerMapping = migrationContainerMappingInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationContainerMappingProperties propertiesInstance = new MigrationContainerMappingProperties();
                                migrationContainerMappingInstance.Properties = propertiesInstance;
                                
                                JToken sourceMigrationContainerFriendlyNameValue = propertiesValue["sourceMigrationContainerFriendlyName"];
                                if (sourceMigrationContainerFriendlyNameValue != null && sourceMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string sourceMigrationContainerFriendlyNameInstance = ((string)sourceMigrationContainerFriendlyNameValue);
                                    propertiesInstance.SourceMigrationContainerFriendlyName = sourceMigrationContainerFriendlyNameInstance;
                                }
                                
                                JToken targetMigrationContainerIdValue = propertiesValue["targetMigrationContainerId"];
                                if (targetMigrationContainerIdValue != null && targetMigrationContainerIdValue.Type != JTokenType.Null)
                                {
                                    string targetMigrationContainerIdInstance = ((string)targetMigrationContainerIdValue);
                                    propertiesInstance.TargetMigrationContainerId = targetMigrationContainerIdInstance;
                                }
                                
                                JToken targetMigrationContainerFriendlyNameValue = propertiesValue["targetMigrationContainerFriendlyName"];
                                if (targetMigrationContainerFriendlyNameValue != null && targetMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string targetMigrationContainerFriendlyNameInstance = ((string)targetMigrationContainerFriendlyNameValue);
                                    propertiesInstance.TargetMigrationContainerFriendlyName = targetMigrationContainerFriendlyNameInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken sourceFabricFriendlyNameValue = propertiesValue["sourceFabricFriendlyName"];
                                if (sourceFabricFriendlyNameValue != null && sourceFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string sourceFabricFriendlyNameInstance = ((string)sourceFabricFriendlyNameValue);
                                    propertiesInstance.SourceFabricFriendlyName = sourceFabricFriendlyNameInstance;
                                }
                                
                                JToken targetFabricFriendlyNameValue = propertiesValue["targetFabricFriendlyName"];
                                if (targetFabricFriendlyNameValue != null && targetFabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string targetFabricFriendlyNameInstance = ((string)targetFabricFriendlyNameValue);
                                    propertiesInstance.TargetFabricFriendlyName = targetFabricFriendlyNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationContainerMappingDetails vMwareCbtMigrationContainerMappingDetailsInstance = new VMwareCbtMigrationContainerMappingDetails();
                                        
                                        JToken keyVaultIdValue = providerSpecificDetailsValue["keyVaultId"];
                                        if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                        {
                                            string keyVaultIdInstance = ((string)keyVaultIdValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                        }
                                        
                                        JToken keyVaultUriValue = providerSpecificDetailsValue["keyVaultUri"];
                                        if (keyVaultUriValue != null && keyVaultUriValue.Type != JTokenType.Null)
                                        {
                                            string keyVaultUriInstance = ((string)keyVaultUriValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultUri = keyVaultUriInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountSasSecretNameValue = providerSpecificDetailsValue["storageAccountSasSecretName"];
                                        if (storageAccountSasSecretNameValue != null && storageAccountSasSecretNameValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountSasSecretNameInstance = ((string)storageAccountSasSecretNameValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountSasSecretName = storageAccountSasSecretNameInstance;
                                        }
                                        
                                        JToken serviceBusConnectionStringSecretNameValue = providerSpecificDetailsValue["serviceBusConnectionStringSecretName"];
                                        if (serviceBusConnectionStringSecretNameValue != null && serviceBusConnectionStringSecretNameValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusConnectionStringSecretNameInstance = ((string)serviceBusConnectionStringSecretNameValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.ServiceBusConnectionStringSecretName = serviceBusConnectionStringSecretNameInstance;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken roleSizeToNicCountMapSequenceElement = ((JToken)providerSpecificDetailsValue["roleSizeToNicCountMap"]);
                                        if (roleSizeToNicCountMapSequenceElement != null && roleSizeToNicCountMapSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in roleSizeToNicCountMapSequenceElement)
                                            {
                                                string roleSizeToNicCountMapKey = ((string)property.Name);
                                                int roleSizeToNicCountMapValue = ((int)property.Value);
                                                vMwareCbtMigrationContainerMappingDetailsInstance.RoleSizeToNicCountMap.Add(roleSizeToNicCountMapKey, roleSizeToNicCountMapValue);
                                            }
                                        }
                                        
                                        JToken excludedSkusArray = providerSpecificDetailsValue["excludedSkus"];
                                        if (excludedSkusArray != null && excludedSkusArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedSkusValue in ((JArray)excludedSkusArray))
                                            {
                                                vMwareCbtMigrationContainerMappingDetailsInstance.ExcludedSkus.Add(((string)excludedSkusValue));
                                            }
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationContainerMappingDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationContainerMappingDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationContainerMappingInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationContainerMappingInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationContainerMappingInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationContainerMappingInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    migrationContainerMappingInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the migration containers for given migration container.
        /// </summary>
        /// <param name='migrationFabricName'>
        /// Required. Migration fabric Name.
        /// </param>
        /// <param name='migrationContainerName'>
        /// Required. Migration Container Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the list of migration container mappings.
        /// </returns>
        public async Task<MigrationContainerMappingListResponse> ListAsync(string migrationFabricName, string migrationContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (migrationFabricName == null)
            {
                throw new ArgumentNullException("migrationFabricName");
            }
            if (migrationContainerName == null)
            {
                throw new ArgumentNullException("migrationContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("migrationFabricName", migrationFabricName);
                tracingParameters.Add("migrationContainerName", migrationContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationMigrationFabrics/";
            url = url + Uri.EscapeDataString(migrationFabricName);
            url = url + "/replicationMigrationContainers/";
            url = url + Uri.EscapeDataString(migrationContainerName);
            url = url + "/replicationMigrationContainerMappings";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationContainerMappingListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationContainerMappingListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationContainerMapping migrationContainerMappingInstance = new MigrationContainerMapping();
                                    result.MigrationContainerMappings.Add(migrationContainerMappingInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationContainerMappingProperties propertiesInstance = new MigrationContainerMappingProperties();
                                        migrationContainerMappingInstance.Properties = propertiesInstance;
                                        
                                        JToken sourceMigrationContainerFriendlyNameValue = propertiesValue["sourceMigrationContainerFriendlyName"];
                                        if (sourceMigrationContainerFriendlyNameValue != null && sourceMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string sourceMigrationContainerFriendlyNameInstance = ((string)sourceMigrationContainerFriendlyNameValue);
                                            propertiesInstance.SourceMigrationContainerFriendlyName = sourceMigrationContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken targetMigrationContainerIdValue = propertiesValue["targetMigrationContainerId"];
                                        if (targetMigrationContainerIdValue != null && targetMigrationContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string targetMigrationContainerIdInstance = ((string)targetMigrationContainerIdValue);
                                            propertiesInstance.TargetMigrationContainerId = targetMigrationContainerIdInstance;
                                        }
                                        
                                        JToken targetMigrationContainerFriendlyNameValue = propertiesValue["targetMigrationContainerFriendlyName"];
                                        if (targetMigrationContainerFriendlyNameValue != null && targetMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string targetMigrationContainerFriendlyNameInstance = ((string)targetMigrationContainerFriendlyNameValue);
                                            propertiesInstance.TargetMigrationContainerFriendlyName = targetMigrationContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            string stateInstance = ((string)stateValue);
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken sourceFabricFriendlyNameValue = propertiesValue["sourceFabricFriendlyName"];
                                        if (sourceFabricFriendlyNameValue != null && sourceFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string sourceFabricFriendlyNameInstance = ((string)sourceFabricFriendlyNameValue);
                                            propertiesInstance.SourceFabricFriendlyName = sourceFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken targetFabricFriendlyNameValue = propertiesValue["targetFabricFriendlyName"];
                                        if (targetFabricFriendlyNameValue != null && targetFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string targetFabricFriendlyNameInstance = ((string)targetFabricFriendlyNameValue);
                                            propertiesInstance.TargetFabricFriendlyName = targetFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyId = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken healthValue = propertiesValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            propertiesInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorsArray = propertiesValue["healthErrors"];
                                        if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "VMwareCbt")
                                            {
                                                VMwareCbtMigrationContainerMappingDetails vMwareCbtMigrationContainerMappingDetailsInstance = new VMwareCbtMigrationContainerMappingDetails();
                                                
                                                JToken keyVaultIdValue = providerSpecificDetailsValue["keyVaultId"];
                                                if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                                {
                                                    string keyVaultIdInstance = ((string)keyVaultIdValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                                }
                                                
                                                JToken keyVaultUriValue = providerSpecificDetailsValue["keyVaultUri"];
                                                if (keyVaultUriValue != null && keyVaultUriValue.Type != JTokenType.Null)
                                                {
                                                    string keyVaultUriInstance = ((string)keyVaultUriValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultUri = keyVaultUriInstance;
                                                }
                                                
                                                JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                                if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountIdInstance = ((string)storageAccountIdValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                                }
                                                
                                                JToken storageAccountSasSecretNameValue = providerSpecificDetailsValue["storageAccountSasSecretName"];
                                                if (storageAccountSasSecretNameValue != null && storageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountSasSecretNameInstance = ((string)storageAccountSasSecretNameValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountSasSecretName = storageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken serviceBusConnectionStringSecretNameValue = providerSpecificDetailsValue["serviceBusConnectionStringSecretName"];
                                                if (serviceBusConnectionStringSecretNameValue != null && serviceBusConnectionStringSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusConnectionStringSecretNameInstance = ((string)serviceBusConnectionStringSecretNameValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.ServiceBusConnectionStringSecretName = serviceBusConnectionStringSecretNameInstance;
                                                }
                                                
                                                JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                                if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetLocationInstance = ((string)targetLocationValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.TargetLocation = targetLocationInstance;
                                                }
                                                
                                                JToken roleSizeToNicCountMapSequenceElement = ((JToken)providerSpecificDetailsValue["roleSizeToNicCountMap"]);
                                                if (roleSizeToNicCountMapSequenceElement != null && roleSizeToNicCountMapSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in roleSizeToNicCountMapSequenceElement)
                                                    {
                                                        string roleSizeToNicCountMapKey = ((string)property.Name);
                                                        int roleSizeToNicCountMapValue = ((int)property.Value);
                                                        vMwareCbtMigrationContainerMappingDetailsInstance.RoleSizeToNicCountMap.Add(roleSizeToNicCountMapKey, roleSizeToNicCountMapValue);
                                                    }
                                                }
                                                
                                                JToken excludedSkusArray = providerSpecificDetailsValue["excludedSkus"];
                                                if (excludedSkusArray != null && excludedSkusArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedSkusValue in ((JArray)excludedSkusArray))
                                                    {
                                                        vMwareCbtMigrationContainerMappingDetailsInstance.ExcludedSkus.Add(((string)excludedSkusValue));
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationContainerMappingDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationContainerMappingInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationContainerMappingInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationContainerMappingInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationContainerMappingInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            migrationContainerMappingInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the migration container mappings for the vault.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the list of migration container mappings.
        /// </returns>
        public async Task<MigrationContainerMappingListResponse> ListAllAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationMigrationContainerMappings";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationContainerMappingListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationContainerMappingListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationContainerMapping migrationContainerMappingInstance = new MigrationContainerMapping();
                                    result.MigrationContainerMappings.Add(migrationContainerMappingInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationContainerMappingProperties propertiesInstance = new MigrationContainerMappingProperties();
                                        migrationContainerMappingInstance.Properties = propertiesInstance;
                                        
                                        JToken sourceMigrationContainerFriendlyNameValue = propertiesValue["sourceMigrationContainerFriendlyName"];
                                        if (sourceMigrationContainerFriendlyNameValue != null && sourceMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string sourceMigrationContainerFriendlyNameInstance = ((string)sourceMigrationContainerFriendlyNameValue);
                                            propertiesInstance.SourceMigrationContainerFriendlyName = sourceMigrationContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken targetMigrationContainerIdValue = propertiesValue["targetMigrationContainerId"];
                                        if (targetMigrationContainerIdValue != null && targetMigrationContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string targetMigrationContainerIdInstance = ((string)targetMigrationContainerIdValue);
                                            propertiesInstance.TargetMigrationContainerId = targetMigrationContainerIdInstance;
                                        }
                                        
                                        JToken targetMigrationContainerFriendlyNameValue = propertiesValue["targetMigrationContainerFriendlyName"];
                                        if (targetMigrationContainerFriendlyNameValue != null && targetMigrationContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string targetMigrationContainerFriendlyNameInstance = ((string)targetMigrationContainerFriendlyNameValue);
                                            propertiesInstance.TargetMigrationContainerFriendlyName = targetMigrationContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            string stateInstance = ((string)stateValue);
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken sourceFabricFriendlyNameValue = propertiesValue["sourceFabricFriendlyName"];
                                        if (sourceFabricFriendlyNameValue != null && sourceFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string sourceFabricFriendlyNameInstance = ((string)sourceFabricFriendlyNameValue);
                                            propertiesInstance.SourceFabricFriendlyName = sourceFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken targetFabricFriendlyNameValue = propertiesValue["targetFabricFriendlyName"];
                                        if (targetFabricFriendlyNameValue != null && targetFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string targetFabricFriendlyNameInstance = ((string)targetFabricFriendlyNameValue);
                                            propertiesInstance.TargetFabricFriendlyName = targetFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyId = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken healthValue = propertiesValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            propertiesInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorsArray = propertiesValue["healthErrors"];
                                        if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "VMwareCbt")
                                            {
                                                VMwareCbtMigrationContainerMappingDetails vMwareCbtMigrationContainerMappingDetailsInstance = new VMwareCbtMigrationContainerMappingDetails();
                                                
                                                JToken keyVaultIdValue = providerSpecificDetailsValue["keyVaultId"];
                                                if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                                {
                                                    string keyVaultIdInstance = ((string)keyVaultIdValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                                }
                                                
                                                JToken keyVaultUriValue = providerSpecificDetailsValue["keyVaultUri"];
                                                if (keyVaultUriValue != null && keyVaultUriValue.Type != JTokenType.Null)
                                                {
                                                    string keyVaultUriInstance = ((string)keyVaultUriValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.KeyVaultUri = keyVaultUriInstance;
                                                }
                                                
                                                JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                                if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountIdInstance = ((string)storageAccountIdValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                                }
                                                
                                                JToken storageAccountSasSecretNameValue = providerSpecificDetailsValue["storageAccountSasSecretName"];
                                                if (storageAccountSasSecretNameValue != null && storageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountSasSecretNameInstance = ((string)storageAccountSasSecretNameValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.StorageAccountSasSecretName = storageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken serviceBusConnectionStringSecretNameValue = providerSpecificDetailsValue["serviceBusConnectionStringSecretName"];
                                                if (serviceBusConnectionStringSecretNameValue != null && serviceBusConnectionStringSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusConnectionStringSecretNameInstance = ((string)serviceBusConnectionStringSecretNameValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.ServiceBusConnectionStringSecretName = serviceBusConnectionStringSecretNameInstance;
                                                }
                                                
                                                JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                                if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetLocationInstance = ((string)targetLocationValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.TargetLocation = targetLocationInstance;
                                                }
                                                
                                                JToken roleSizeToNicCountMapSequenceElement = ((JToken)providerSpecificDetailsValue["roleSizeToNicCountMap"]);
                                                if (roleSizeToNicCountMapSequenceElement != null && roleSizeToNicCountMapSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in roleSizeToNicCountMapSequenceElement)
                                                    {
                                                        string roleSizeToNicCountMapKey = ((string)property.Name);
                                                        int roleSizeToNicCountMapValue = ((int)property.Value);
                                                        vMwareCbtMigrationContainerMappingDetailsInstance.RoleSizeToNicCountMap.Add(roleSizeToNicCountMapKey, roleSizeToNicCountMapValue);
                                                    }
                                                }
                                                
                                                JToken excludedSkusArray = providerSpecificDetailsValue["excludedSkus"];
                                                if (excludedSkusArray != null && excludedSkusArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedSkusValue in ((JArray)excludedSkusArray))
                                                    {
                                                        vMwareCbtMigrationContainerMappingDetailsInstance.ExcludedSkus.Add(((string)excludedSkusValue));
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vMwareCbtMigrationContainerMappingDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationContainerMappingDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationContainerMappingInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationContainerMappingInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationContainerMappingInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationContainerMappingInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            migrationContainerMappingInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
