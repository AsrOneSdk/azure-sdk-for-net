// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of migration item operations for the Site Recovery extension.
    /// </summary>
    internal partial class MigrationItemOperations : IServiceOperations<SiteRecoveryManagementClient>, IMigrationItemOperations
    {
        /// <summary>
        /// Initializes a new instance of the MigrationItemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MigrationItemOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Delete migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='deleteOption'>
        /// Optional. Delete option.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDisableMigrationAsync(string fabricName, string protectionContainerName, string migrationItemName, string deleteOption, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("deleteOption", deleteOption);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDisableMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            List<string> queryParameters = new List<string>();
            if (deleteOption != null)
            {
                queryParameters.Add("deleteOption=" + Uri.EscapeDataString(deleteOption));
            }
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enable migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable migration input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginEnableMigrationAsync(string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginEnableMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject enableMigrationInputValue = new JObject();
                requestDoc = enableMigrationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    enableMigrationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.PolicyId != null)
                    {
                        propertiesValue["policyId"] = input.Properties.PolicyId;
                    }
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is VMwareCbtEnableMigrationInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareCbt";
                            VMwareCbtEnableMigrationInput derived = ((VMwareCbtEnableMigrationInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.VMwareMachineId != null)
                            {
                                providerSpecificDetailsValue["vmwareMachineId"] = derived.VMwareMachineId;
                            }
                            
                            if (derived.DisksToInclude != null)
                            {
                                if (derived.DisksToInclude is ILazyCollection == false || ((ILazyCollection)derived.DisksToInclude).IsInitialized)
                                {
                                    JArray disksToIncludeArray = new JArray();
                                    foreach (VMwareCbtDiskInput disksToIncludeItem in derived.DisksToInclude)
                                    {
                                        JObject vMwareCbtDiskInputValue = new JObject();
                                        disksToIncludeArray.Add(vMwareCbtDiskInputValue);
                                        
                                        if (disksToIncludeItem.DiskId != null)
                                        {
                                            vMwareCbtDiskInputValue["diskId"] = disksToIncludeItem.DiskId;
                                        }
                                        
                                        if (disksToIncludeItem.IsOSDisk != null)
                                        {
                                            vMwareCbtDiskInputValue["isOSDisk"] = disksToIncludeItem.IsOSDisk;
                                        }
                                        
                                        if (disksToIncludeItem.LogStorageAccountId != null)
                                        {
                                            vMwareCbtDiskInputValue["logStorageAccountId"] = disksToIncludeItem.LogStorageAccountId;
                                        }
                                        
                                        if (disksToIncludeItem.LogStorageAccountSasSecretName != null)
                                        {
                                            vMwareCbtDiskInputValue["logStorageAccountSasSecretName"] = disksToIncludeItem.LogStorageAccountSasSecretName;
                                        }
                                        
                                        if (disksToIncludeItem.DiskType != null)
                                        {
                                            vMwareCbtDiskInputValue["diskType"] = disksToIncludeItem.DiskType;
                                        }
                                    }
                                    providerSpecificDetailsValue["disksToInclude"] = disksToIncludeArray;
                                }
                            }
                            
                            if (derived.LicenseType != null)
                            {
                                providerSpecificDetailsValue["licenseType"] = derived.LicenseType;
                            }
                            
                            if (derived.StorageAccountId != null)
                            {
                                providerSpecificDetailsValue["storageAccountId"] = derived.StorageAccountId;
                            }
                            
                            if (derived.TargetVmName != null)
                            {
                                providerSpecificDetailsValue["targetVmName"] = derived.TargetVmName;
                            }
                            
                            if (derived.TargetVmSize != null)
                            {
                                providerSpecificDetailsValue["targetVmSize"] = derived.TargetVmSize;
                            }
                            
                            if (derived.TargetResourceGroupId != null)
                            {
                                providerSpecificDetailsValue["targetResourceGroupId"] = derived.TargetResourceGroupId;
                            }
                            
                            if (derived.TargetAvailabilitySetId != null)
                            {
                                providerSpecificDetailsValue["targetAvailabilitySetId"] = derived.TargetAvailabilitySetId;
                            }
                            
                            if (derived.DataMoverRunAsAccountId != null)
                            {
                                providerSpecificDetailsValue["dataMoverRunAsAccountId"] = derived.DataMoverRunAsAccountId;
                            }
                            
                            if (derived.SnapshotRunAsAccountId != null)
                            {
                                providerSpecificDetailsValue["snapshotRunAsAccountId"] = derived.SnapshotRunAsAccountId;
                            }
                            
                            if (derived.TargetNetworkId != null)
                            {
                                providerSpecificDetailsValue["targetNetworkId"] = derived.TargetNetworkId;
                            }
                            
                            if (derived.TargetSubnetName != null)
                            {
                                providerSpecificDetailsValue["targetSubnetName"] = derived.TargetSubnetName;
                            }
                            
                            if (derived.Type != null)
                            {
                                providerSpecificDetailsValue["instanceType"] = derived.Type;
                            }
                        }
                        if (input.Properties.ProviderSpecificDetails is InMageMigrationEnableMigrationInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "InMageMigration";
                            InMageMigrationEnableMigrationInput derived2 = ((InMageMigrationEnableMigrationInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived2.VMwareMachineId != null)
                            {
                                providerSpecificDetailsValue["vmwareMachineId"] = derived2.VMwareMachineId;
                            }
                            
                            if (derived2.LicenseType != null)
                            {
                                providerSpecificDetailsValue["licenseType"] = derived2.LicenseType;
                            }
                            
                            if (derived2.StorageAccountId != null)
                            {
                                providerSpecificDetailsValue["storageAccountId"] = derived2.StorageAccountId;
                            }
                            
                            if (derived2.TargetVmName != null)
                            {
                                providerSpecificDetailsValue["targetVmName"] = derived2.TargetVmName;
                            }
                            
                            if (derived2.TargetVmSize != null)
                            {
                                providerSpecificDetailsValue["targetVmSize"] = derived2.TargetVmSize;
                            }
                            
                            if (derived2.TargetResourceGroupId != null)
                            {
                                providerSpecificDetailsValue["targetResourceGroupId"] = derived2.TargetResourceGroupId;
                            }
                            
                            if (derived2.TargetNetworkId != null)
                            {
                                providerSpecificDetailsValue["targetNetworkId"] = derived2.TargetNetworkId;
                            }
                            
                            if (derived2.TargetSubnetName != null)
                            {
                                providerSpecificDetailsValue["targetSubnetName"] = derived2.TargetSubnetName;
                            }
                            
                            if (derived2.TargetAvailabilitySetId != null)
                            {
                                providerSpecificDetailsValue["targetAvailabilitySetId"] = derived2.TargetAvailabilitySetId;
                            }
                            
                            if (derived2.TargetBootDiagnosticsStorageAccountId != null)
                            {
                                providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"] = derived2.TargetBootDiagnosticsStorageAccountId;
                            }
                            
                            if (derived2.LogStorageAccountId != null)
                            {
                                providerSpecificDetailsValue["logStorageAccountId"] = derived2.LogStorageAccountId;
                            }
                            
                            if (derived2.DiskType != null)
                            {
                                providerSpecificDetailsValue["diskType"] = derived2.DiskType;
                            }
                            
                            if (derived2.ProcessServerId != null)
                            {
                                providerSpecificDetailsValue["processServerId"] = derived2.ProcessServerId;
                            }
                            
                            if (derived2.Type != null)
                            {
                                providerSpecificDetailsValue["instanceType"] = derived2.Type;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Migrate input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginMigrateAsync(string fabricName, string protectionContainerName, string migrationItemName, MigrateInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginMigrateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            url = url + "/migrate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject migrateInputValue = new JObject();
                requestDoc = migrateInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    migrateInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is VMwareCbtMigrateInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareCbt";
                            VMwareCbtMigrateInput derived = ((VMwareCbtMigrateInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.PerformShutdown != null)
                            {
                                providerSpecificDetailsValue["performShutdown"] = derived.PerformShutdown;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute test migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test migrate input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestMigrateAsync(string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginTestMigrateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            url = url + "/testMigrate";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject testMigrateInputValue = new JObject();
                requestDoc = testMigrateInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    testMigrateInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is VMwareCbtTestMigrateInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareCbt";
                            VMwareCbtTestMigrateInput derived = ((VMwareCbtTestMigrateInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.RecoveryPointId != null)
                            {
                                providerSpecificDetailsValue["recoveryPointId"] = derived.RecoveryPointId;
                            }
                            
                            if (derived.NetworkId != null)
                            {
                                providerSpecificDetailsValue["networkId"] = derived.NetworkId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute test migrate cleanup for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test migrate cleanup input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestMigrateCleanupAsync(string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginTestMigrateCleanupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            url = url + "/testMigrateCleanup";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject testMigrateCleanupInputValue = new JObject();
                requestDoc = testMigrateCleanupInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    testMigrateCleanupInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.Comments != null)
                    {
                        propertiesValue["comments"] = input.Properties.Comments;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the given migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Updation input
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUpdateMigrationItemAsync(string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateMigrationItemAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject updateMigrationItemInputValue = new JObject();
                requestDoc = updateMigrationItemInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    updateMigrationItemInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.ProviderSpecificDetails != null)
                    {
                        JObject providerSpecificDetailsValue = new JObject();
                        propertiesValue["providerSpecificDetails"] = providerSpecificDetailsValue;
                        if (input.Properties.ProviderSpecificDetails is VMwareCbtUpdateMigrationItemInput)
                        {
                            providerSpecificDetailsValue["instanceType"] = "VMwareCbt";
                            VMwareCbtUpdateMigrationItemInput derived = ((VMwareCbtUpdateMigrationItemInput)input.Properties.ProviderSpecificDetails);
                            
                            if (derived.TargetVmName != null)
                            {
                                providerSpecificDetailsValue["targetVmName"] = derived.TargetVmName;
                            }
                            
                            if (derived.TargetVmSize != null)
                            {
                                providerSpecificDetailsValue["targetVmSize"] = derived.TargetVmSize;
                            }
                            
                            if (derived.TargetResourceGroupId != null)
                            {
                                providerSpecificDetailsValue["targetResourceGroupId"] = derived.TargetResourceGroupId;
                            }
                            
                            if (derived.TargetAvailabilitySetId != null)
                            {
                                providerSpecificDetailsValue["targetAvailabilitySetId"] = derived.TargetAvailabilitySetId;
                            }
                            
                            if (derived.TargetBootDiagnosticsStorageAccountId != null)
                            {
                                providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"] = derived.TargetBootDiagnosticsStorageAccountId;
                            }
                            
                            if (derived.TargetNetworkId != null)
                            {
                                providerSpecificDetailsValue["targetNetworkId"] = derived.TargetNetworkId;
                            }
                            
                            if (derived.VmNics != null)
                            {
                                if (derived.VmNics is ILazyCollection == false || ((ILazyCollection)derived.VmNics).IsInitialized)
                                {
                                    JArray vmNicsArray = new JArray();
                                    foreach (VMwareCbtNicInput vmNicsItem in derived.VmNics)
                                    {
                                        JObject vMwareCbtNicInputValue = new JObject();
                                        vmNicsArray.Add(vMwareCbtNicInputValue);
                                        
                                        if (vmNicsItem.NicId != null)
                                        {
                                            vMwareCbtNicInputValue["nicId"] = vmNicsItem.NicId;
                                        }
                                        
                                        if (vmNicsItem.IsPrimaryNic != null)
                                        {
                                            vMwareCbtNicInputValue["isPrimaryNic"] = vmNicsItem.IsPrimaryNic;
                                        }
                                        
                                        if (vmNicsItem.TargetSubnetName != null)
                                        {
                                            vMwareCbtNicInputValue["targetSubnetName"] = vmNicsItem.TargetSubnetName;
                                        }
                                        
                                        if (vmNicsItem.TargetStaticIPAddress != null)
                                        {
                                            vMwareCbtNicInputValue["targetStaticIPAddress"] = vmNicsItem.TargetStaticIPAddress;
                                        }
                                        
                                        if (vmNicsItem.IsSelectedForMigration != null)
                                        {
                                            vMwareCbtNicInputValue["isSelectedForMigration"] = vmNicsItem.IsSelectedForMigration;
                                        }
                                    }
                                    providerSpecificDetailsValue["vmNics"] = vmNicsArray;
                                }
                            }
                            
                            if (derived.LicenseType != null)
                            {
                                providerSpecificDetailsValue["licenseType"] = derived.LicenseType;
                            }
                            
                            if (derived.Type != null)
                            {
                                providerSpecificDetailsValue["instanceType"] = derived.Type;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='deleteOption'>
        /// Optional. Delete option.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DisableMigrationAsync(string fabricName, string protectionContainerName, string migrationItemName, string deleteOption, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("deleteOption", deleteOption);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DisableMigrationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginDisableMigrationAsync(fabricName, protectionContainerName, migrationItemName, deleteOption, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetDisableMigrationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetDisableMigrationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Enable migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable migration input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> EnableMigrationAsync(string fabricName, string protectionContainerName, string migrationItemName, EnableMigrationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "EnableMigrationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginEnableMigrationAsync(fabricName, protectionContainerName, migrationItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetEnableMigrationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetEnableMigrationStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the migration object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the migration item.
        /// </returns>
        public async Task<MigrationItemResponse> GetAsync(string fabricName, string protectionContainerName, string migrationItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetDisableMigrationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDisableMigrationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetEnableMigrationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetEnableMigrationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetMigrateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetMigrateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetTestMigrateCleanupStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetTestMigrateCleanupStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetTestMigrateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetTestMigrateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for migration items operation.
        /// </returns>
        public async Task<MigrationItemOperationResponse> GetUpdateMigrationItemStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateMigrationItemStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationItem migrationItemInstance = new MigrationItem();
                            result.MigrationItem = migrationItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                migrationItemInstance.Properties = propertiesInstance;
                                
                                JToken machineNameValue = propertiesValue["machineName"];
                                if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                {
                                    string machineNameInstance = ((string)machineNameValue);
                                    propertiesInstance.MachineName = machineNameInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyId = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                {
                                    string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                    propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                }
                                
                                JToken migrationStateValue = propertiesValue["migrationState"];
                                if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                {
                                    string migrationStateInstance = ((string)migrationStateValue);
                                    propertiesInstance.MigrationState = migrationStateInstance;
                                }
                                
                                JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                    propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                }
                                
                                JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                    propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                }
                                
                                JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                {
                                    string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                    propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                }
                                
                                JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateInstance = ((string)testMigrateStateValue);
                                    propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                }
                                
                                JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                    propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                }
                                
                                JToken healthValue = propertiesValue["health"];
                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                {
                                    string healthInstance = ((string)healthValue);
                                    propertiesInstance.Health = healthInstance;
                                }
                                
                                JToken healthErrorsArray = propertiesValue["healthErrors"];
                                if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                    }
                                }
                                
                                JToken currentJobValue = propertiesValue["currentJob"];
                                if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                {
                                    CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                    propertiesInstance.CurrentJob = currentJobInstance;
                                    
                                    JToken jobNameValue = currentJobValue["JobName"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        currentJobInstance.JobName = jobNameInstance;
                                    }
                                    
                                    JToken jobIdValue = currentJobValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        currentJobInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken startTimeValue = currentJobValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        currentJobInstance.StartTime = startTimeInstance;
                                    }
                                }
                                
                                JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                {
                                    string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                    propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                }
                                
                                JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                    if (typeName == "VMwareCbt")
                                    {
                                        VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                        
                                        JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                            vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                        }
                                        
                                        JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance = ((string)osTypeValue);
                                            vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                        }
                                        
                                        JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance = ((string)licenseTypeValue);
                                            vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                        }
                                        
                                        JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                        if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                        }
                                        
                                        JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                        if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                        }
                                        
                                        JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                        if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string storageAccountIdInstance = ((string)storageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                        }
                                        
                                        JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance = ((string)targetVmNameValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                        }
                                        
                                        JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance = ((string)targetVmSizeValue);
                                            vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                        }
                                        
                                        JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                            {
                                                VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                
                                                JToken diskIdValue = protectedDisksValue["diskId"];
                                                if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance = ((string)diskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                }
                                                
                                                JToken diskNameValue = protectedDisksValue["diskName"];
                                                if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance = ((string)diskNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                }
                                                
                                                JToken diskPathValue = protectedDisksValue["diskPath"];
                                                if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                {
                                                    string diskPathInstance = ((string)diskPathValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                }
                                                
                                                JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                {
                                                    string isOSDiskInstance = ((string)isOSDiskValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                }
                                                
                                                JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                }
                                                
                                                JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                }
                                                
                                                JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                }
                                                
                                                JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                }
                                                
                                                JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                }
                                                
                                                JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                }
                                                
                                                JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                }
                                                
                                                JToken diskTypeValue = protectedDisksValue["diskType"];
                                                if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance = ((string)diskTypeValue);
                                                    vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                            vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                        }
                                        
                                        JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                            {
                                                VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                
                                                JToken nicIdValue = vmNicsValue["nicId"];
                                                if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance = ((string)nicIdValue);
                                                    vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                }
                                                
                                                JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                    vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                }
                                                
                                                JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                }
                                                
                                                JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                    vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                }
                                                
                                                JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                }
                                                
                                                JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                    vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                }
                                                
                                                JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                    vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                }
                                                
                                                JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                    vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                        if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                        {
                                            string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                        }
                                        
                                        JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                        if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                            vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                        }
                                        
                                        JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                        if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                        }
                                        
                                        JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                        if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                        {
                                            int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                            vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                        }
                                        
                                        JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance = ((string)instanceTypeValue);
                                            vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                    }
                                    if (typeName == "InMageMigration")
                                    {
                                        InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                        
                                        JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                        if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                        {
                                            string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                        }
                                        
                                        JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                        if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                        {
                                            string processServerIdInstance = ((string)processServerIdValue);
                                            inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                        }
                                        
                                        JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                        if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                        {
                                            string osTypeInstance2 = ((string)osTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                        }
                                        
                                        JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                        if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                        {
                                            string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                        }
                                        
                                        JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                        if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                        }
                                        
                                        JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                        if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                        {
                                            string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                        }
                                        
                                        JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                        if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                        {
                                            string targetLocationInstance = ((string)targetLocationValue);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                        }
                                        
                                        JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                        if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                        }
                                        
                                        JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                        if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                        }
                                        
                                        JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                        if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                        }
                                        
                                        JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                        if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                        {
                                            string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                        }
                                        
                                        JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                        if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                        {
                                            string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                        }
                                        
                                        JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                        if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                            {
                                                InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                
                                                JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string diskIdInstance2 = ((string)diskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                }
                                                
                                                JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                {
                                                    string diskNameInstance2 = ((string)diskNameValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                }
                                                
                                                JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                {
                                                    bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                }
                                                
                                                JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                {
                                                    long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                    vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                }
                                                
                                                JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                }
                                                
                                                JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                }
                                                
                                                JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                }
                                                
                                                JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                }
                                                
                                                JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string diskTypeInstance2 = ((string)diskTypeValue2);
                                                    vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                        if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                            {
                                                InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                
                                                JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                {
                                                    string nicIdInstance2 = ((string)nicIdValue2);
                                                    inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                }
                                                
                                                JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                {
                                                    string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                    inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                }
                                                
                                                JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                }
                                                
                                                JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                }
                                                
                                                JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                    inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                }
                                                
                                                JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                }
                                                
                                                JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                    inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                }
                                                
                                                JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                    inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                }
                                                
                                                JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                {
                                                    string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                    inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                        if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                        {
                                            string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                            inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                        }
                                        propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationItemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationItemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the migration items in the container.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the list of migration items.
        /// </returns>
        public async Task<MigrationItemListResponse> ListAsync(string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationItem migrationItemInstance = new MigrationItem();
                                    result.MigrationItems.Add(migrationItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                        migrationItemInstance.Properties = propertiesInstance;
                                        
                                        JToken machineNameValue = propertiesValue["machineName"];
                                        if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                        {
                                            string machineNameInstance = ((string)machineNameValue);
                                            propertiesInstance.MachineName = machineNameInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyId = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken migrationStateValue = propertiesValue["migrationState"];
                                        if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateInstance = ((string)migrationStateValue);
                                            propertiesInstance.MigrationState = migrationStateInstance;
                                        }
                                        
                                        JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                        if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                            propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                        }
                                        
                                        JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                        if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                            propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                        }
                                        
                                        JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                        if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                        {
                                            string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                            propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                        }
                                        
                                        JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                        if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateInstance = ((string)testMigrateStateValue);
                                            propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                        }
                                        
                                        JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                        if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                            propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                        }
                                        
                                        JToken healthValue = propertiesValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            propertiesInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorsArray = propertiesValue["healthErrors"];
                                        if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken currentJobValue = propertiesValue["currentJob"];
                                        if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                        {
                                            CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                            propertiesInstance.CurrentJob = currentJobInstance;
                                            
                                            JToken jobNameValue = currentJobValue["JobName"];
                                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance = ((string)jobNameValue);
                                                currentJobInstance.JobName = jobNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentJobValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentJobInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentJobValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentJobInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                        if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                        {
                                            string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                            propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "VMwareCbt")
                                            {
                                                VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                                
                                                JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                                    vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance = ((string)licenseTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                                }
                                                
                                                JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                                if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                                }
                                                
                                                JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                                if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                                }
                                                
                                                JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                                if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountIdInstance = ((string)storageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                                }
                                                
                                                JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance = ((string)targetVmNameValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                                }
                                                
                                                JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance = ((string)targetVmSizeValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                                }
                                                
                                                JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                                    {
                                                        VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                        vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                        
                                                        JToken diskIdValue = protectedDisksValue["diskId"];
                                                        if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance = ((string)diskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                        }
                                                        
                                                        JToken diskNameValue = protectedDisksValue["diskName"];
                                                        if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance = ((string)diskNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                        }
                                                        
                                                        JToken diskPathValue = protectedDisksValue["diskPath"];
                                                        if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                        {
                                                            string diskPathInstance = ((string)diskPathValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                        }
                                                        
                                                        JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                        if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                        {
                                                            string isOSDiskInstance = ((string)isOSDiskValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                        if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                        if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                        if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                        if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                        }
                                                        
                                                        JToken diskTypeValue = protectedDisksValue["diskType"];
                                                        if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance = ((string)diskTypeValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                        vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                        if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                            vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                        if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                        if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                            vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                        if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                        if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                            vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                            vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                                if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                                {
                                                    string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                                }
                                                
                                                JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                                if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                                    vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                                }
                                                
                                                JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                                if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                                }
                                                
                                                JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                                if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                            }
                                            if (typeName == "InMageMigration")
                                            {
                                                InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                                
                                                JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                                }
                                                
                                                JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                                }
                                                
                                                JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                                }
                                                
                                                JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                                }
                                                
                                                JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                                if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetLocationInstance = ((string)targetLocationValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                                }
                                                
                                                JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                                }
                                                
                                                JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                                    {
                                                        InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                        
                                                        JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                        if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance2 = ((string)diskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                        }
                                                        
                                                        JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                        if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance2 = ((string)diskNameValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                        }
                                                        
                                                        JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                        if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                        {
                                                            bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                        }
                                                        
                                                        JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                        if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                        if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                            vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                        if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                        if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                        }
                                                        
                                                        JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                        if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance2 = ((string)diskTypeValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                        if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                            inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                        if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                        if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                            inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                        if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                        if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                            inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                            inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationItemInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enumerate all migration items under vault.
        /// </summary>
        /// <param name='skipToken'>
        /// Optional. Continuation token.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Migration items query parameter.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the list of migration items.
        /// </returns>
        public async Task<MigrationItemListResponse> ListAllAsync(string skipToken, MigrationItemsQueryParameter parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("skipToken", skipToken);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationMigrationItems";
            List<string> queryParameters = new List<string>();
            if (skipToken != null)
            {
                queryParameters.Add("skipToken=" + Uri.EscapeDataString(skipToken));
            }
            queryParameters.Add("api-version=2018-07-10");
            List<string> odataFilter = new List<string>();
            if (parameters != null && parameters.ToQueryString() != null)
            {
                odataFilter.Add(Uri.EscapeDataString(parameters.ToQueryString().ToString()));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationItem migrationItemInstance = new MigrationItem();
                                    result.MigrationItems.Add(migrationItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                        migrationItemInstance.Properties = propertiesInstance;
                                        
                                        JToken machineNameValue = propertiesValue["machineName"];
                                        if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                        {
                                            string machineNameInstance = ((string)machineNameValue);
                                            propertiesInstance.MachineName = machineNameInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyId = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken migrationStateValue = propertiesValue["migrationState"];
                                        if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateInstance = ((string)migrationStateValue);
                                            propertiesInstance.MigrationState = migrationStateInstance;
                                        }
                                        
                                        JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                        if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                            propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                        }
                                        
                                        JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                        if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                            propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                        }
                                        
                                        JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                        if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                        {
                                            string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                            propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                        }
                                        
                                        JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                        if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateInstance = ((string)testMigrateStateValue);
                                            propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                        }
                                        
                                        JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                        if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                            propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                        }
                                        
                                        JToken healthValue = propertiesValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            propertiesInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorsArray = propertiesValue["healthErrors"];
                                        if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken currentJobValue = propertiesValue["currentJob"];
                                        if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                        {
                                            CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                            propertiesInstance.CurrentJob = currentJobInstance;
                                            
                                            JToken jobNameValue = currentJobValue["JobName"];
                                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance = ((string)jobNameValue);
                                                currentJobInstance.JobName = jobNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentJobValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentJobInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentJobValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentJobInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                        if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                        {
                                            string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                            propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "VMwareCbt")
                                            {
                                                VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                                
                                                JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                                    vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance = ((string)licenseTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                                }
                                                
                                                JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                                if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                                }
                                                
                                                JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                                if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                                }
                                                
                                                JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                                if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountIdInstance = ((string)storageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                                }
                                                
                                                JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance = ((string)targetVmNameValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                                }
                                                
                                                JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance = ((string)targetVmSizeValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                                }
                                                
                                                JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                                    {
                                                        VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                        vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                        
                                                        JToken diskIdValue = protectedDisksValue["diskId"];
                                                        if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance = ((string)diskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                        }
                                                        
                                                        JToken diskNameValue = protectedDisksValue["diskName"];
                                                        if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance = ((string)diskNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                        }
                                                        
                                                        JToken diskPathValue = protectedDisksValue["diskPath"];
                                                        if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                        {
                                                            string diskPathInstance = ((string)diskPathValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                        }
                                                        
                                                        JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                        if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                        {
                                                            string isOSDiskInstance = ((string)isOSDiskValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                        if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                        if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                        if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                        if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                        }
                                                        
                                                        JToken diskTypeValue = protectedDisksValue["diskType"];
                                                        if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance = ((string)diskTypeValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                        vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                        if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                            vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                        if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                        if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                            vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                        if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                        if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                            vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                            vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                                if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                                {
                                                    string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                                }
                                                
                                                JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                                if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                                    vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                                }
                                                
                                                JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                                if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                                }
                                                
                                                JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                                if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                            }
                                            if (typeName == "InMageMigration")
                                            {
                                                InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                                
                                                JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                                }
                                                
                                                JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                                }
                                                
                                                JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                                }
                                                
                                                JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                                }
                                                
                                                JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                                if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetLocationInstance = ((string)targetLocationValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                                }
                                                
                                                JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                                }
                                                
                                                JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                                    {
                                                        InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                        
                                                        JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                        if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance2 = ((string)diskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                        }
                                                        
                                                        JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                        if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance2 = ((string)diskNameValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                        }
                                                        
                                                        JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                        if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                        {
                                                            bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                        }
                                                        
                                                        JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                        if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                        if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                            vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                        if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                        if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                        }
                                                        
                                                        JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                        if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance2 = ((string)diskTypeValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                        if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                            inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                        if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                        if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                            inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                        if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                        if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                            inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                            inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationItemInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get subsequent page data for migration items under vault.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next migration items page.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model for the list of migration items.
        /// </returns>
        public async Task<MigrationItemListResponse> ListAllNextAsync(string nextLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationItem migrationItemInstance = new MigrationItem();
                                    result.MigrationItems.Add(migrationItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationItemProperties propertiesInstance = new MigrationItemProperties();
                                        migrationItemInstance.Properties = propertiesInstance;
                                        
                                        JToken machineNameValue = propertiesValue["machineName"];
                                        if (machineNameValue != null && machineNameValue.Type != JTokenType.Null)
                                        {
                                            string machineNameInstance = ((string)machineNameValue);
                                            propertiesInstance.MachineName = machineNameInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyId = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken recoveryServicesProviderIdValue = propertiesValue["recoveryServicesProviderId"];
                                        if (recoveryServicesProviderIdValue != null && recoveryServicesProviderIdValue.Type != JTokenType.Null)
                                        {
                                            string recoveryServicesProviderIdInstance = ((string)recoveryServicesProviderIdValue);
                                            propertiesInstance.RecoveryServicesProviderId = recoveryServicesProviderIdInstance;
                                        }
                                        
                                        JToken migrationStateValue = propertiesValue["migrationState"];
                                        if (migrationStateValue != null && migrationStateValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateInstance = ((string)migrationStateValue);
                                            propertiesInstance.MigrationState = migrationStateInstance;
                                        }
                                        
                                        JToken migrationStateDescriptionValue = propertiesValue["migrationStateDescription"];
                                        if (migrationStateDescriptionValue != null && migrationStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string migrationStateDescriptionInstance = ((string)migrationStateDescriptionValue);
                                            propertiesInstance.MigrationStateDescription = migrationStateDescriptionInstance;
                                        }
                                        
                                        JToken lastTestMigrationTimeValue = propertiesValue["lastTestMigrationTime"];
                                        if (lastTestMigrationTimeValue != null && lastTestMigrationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastTestMigrationTimeInstance = ((DateTime)lastTestMigrationTimeValue);
                                            propertiesInstance.LastTestMigrationTime = lastTestMigrationTimeInstance;
                                        }
                                        
                                        JToken lastTestMigrationStatusValue = propertiesValue["lastTestMigrationStatus"];
                                        if (lastTestMigrationStatusValue != null && lastTestMigrationStatusValue.Type != JTokenType.Null)
                                        {
                                            string lastTestMigrationStatusInstance = ((string)lastTestMigrationStatusValue);
                                            propertiesInstance.LastTestMigrationStatus = lastTestMigrationStatusInstance;
                                        }
                                        
                                        JToken testMigrateStateValue = propertiesValue["testMigrateState"];
                                        if (testMigrateStateValue != null && testMigrateStateValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateInstance = ((string)testMigrateStateValue);
                                            propertiesInstance.TestMigrateState = testMigrateStateInstance;
                                        }
                                        
                                        JToken testMigrateStateDescriptionValue = propertiesValue["testMigrateStateDescription"];
                                        if (testMigrateStateDescriptionValue != null && testMigrateStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testMigrateStateDescriptionInstance = ((string)testMigrateStateDescriptionValue);
                                            propertiesInstance.TestMigrateStateDescription = testMigrateStateDescriptionInstance;
                                        }
                                        
                                        JToken healthValue = propertiesValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            propertiesInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorsArray = propertiesValue["healthErrors"];
                                        if (healthErrorsArray != null && healthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorsValue in ((JArray)healthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                propertiesInstance.AllowedOperations.Add(((string)allowedOperationsValue));
                                            }
                                        }
                                        
                                        JToken currentJobValue = propertiesValue["currentJob"];
                                        if (currentJobValue != null && currentJobValue.Type != JTokenType.Null)
                                        {
                                            CurrentJobDetails currentJobInstance = new CurrentJobDetails();
                                            propertiesInstance.CurrentJob = currentJobInstance;
                                            
                                            JToken jobNameValue = currentJobValue["JobName"];
                                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance = ((string)jobNameValue);
                                                currentJobInstance.JobName = jobNameInstance;
                                            }
                                            
                                            JToken jobIdValue = currentJobValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                currentJobInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken startTimeValue = currentJobValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                currentJobInstance.StartTime = startTimeInstance;
                                            }
                                        }
                                        
                                        JToken eventCorrelationIdValue = propertiesValue["eventCorrelationId"];
                                        if (eventCorrelationIdValue != null && eventCorrelationIdValue.Type != JTokenType.Null)
                                        {
                                            string eventCorrelationIdInstance = ((string)eventCorrelationIdValue);
                                            propertiesInstance.EventCorrelationId = eventCorrelationIdInstance;
                                        }
                                        
                                        JToken providerSpecificDetailsValue = propertiesValue["providerSpecificDetails"];
                                        if (providerSpecificDetailsValue != null && providerSpecificDetailsValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)providerSpecificDetailsValue["instanceType"]);
                                            if (typeName == "VMwareCbt")
                                            {
                                                VMwareCbtMigrationDetails vMwareCbtMigrationDetailsInstance = new VMwareCbtMigrationDetails();
                                                
                                                JToken vmwareMachineIdValue = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue != null && vmwareMachineIdValue.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance = ((string)vmwareMachineIdValue);
                                                    vMwareCbtMigrationDetailsInstance.VMwareMachineId = vmwareMachineIdInstance;
                                                }
                                                
                                                JToken osTypeValue = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance = ((string)osTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.OSType = osTypeInstance;
                                                }
                                                
                                                JToken licenseTypeValue = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue != null && licenseTypeValue.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance = ((string)licenseTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.LicenseType = licenseTypeInstance;
                                                }
                                                
                                                JToken dataMoverRunAsAccountIdValue = providerSpecificDetailsValue["dataMoverRunAsAccountId"];
                                                if (dataMoverRunAsAccountIdValue != null && dataMoverRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string dataMoverRunAsAccountIdInstance = ((string)dataMoverRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.DataMoverRunAsAccountId = dataMoverRunAsAccountIdInstance;
                                                }
                                                
                                                JToken snapshotRunAsAccountIdValue = providerSpecificDetailsValue["snapshotRunAsAccountId"];
                                                if (snapshotRunAsAccountIdValue != null && snapshotRunAsAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string snapshotRunAsAccountIdInstance = ((string)snapshotRunAsAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.SnapshotRunAsAccountId = snapshotRunAsAccountIdInstance;
                                                }
                                                
                                                JToken storageAccountIdValue = providerSpecificDetailsValue["storageAccountId"];
                                                if (storageAccountIdValue != null && storageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string storageAccountIdInstance = ((string)storageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.StorageAccountId = storageAccountIdInstance;
                                                }
                                                
                                                JToken targetVmNameValue = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue != null && targetVmNameValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance = ((string)targetVmNameValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmName = targetVmNameInstance;
                                                }
                                                
                                                JToken targetVmSizeValue = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue != null && targetVmSizeValue.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance = ((string)targetVmSizeValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetVmSize = targetVmSizeInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue != null && targetResourceGroupIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance = ((string)targetResourceGroupIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue != null && targetAvailabilitySetIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance = ((string)targetAvailabilitySetIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue != null && targetBootDiagnosticsStorageAccountIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance = ((string)targetBootDiagnosticsStorageAccountIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance;
                                                }
                                                
                                                JToken protectedDisksArray = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray != null && protectedDisksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue in ((JArray)protectedDisksArray))
                                                    {
                                                        VMwareCbtProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance = new VMwareCbtProtectedDiskDetails();
                                                        vMwareCbtMigrationDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance);
                                                        
                                                        JToken diskIdValue = protectedDisksValue["diskId"];
                                                        if (diskIdValue != null && diskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance = ((string)diskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskId = diskIdInstance;
                                                        }
                                                        
                                                        JToken diskNameValue = protectedDisksValue["diskName"];
                                                        if (diskNameValue != null && diskNameValue.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance = ((string)diskNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskName = diskNameInstance;
                                                        }
                                                        
                                                        JToken diskPathValue = protectedDisksValue["diskPath"];
                                                        if (diskPathValue != null && diskPathValue.Type != JTokenType.Null)
                                                        {
                                                            string diskPathInstance = ((string)diskPathValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskPath = diskPathInstance;
                                                        }
                                                        
                                                        JToken isOSDiskValue = protectedDisksValue["isOSDisk"];
                                                        if (isOSDiskValue != null && isOSDiskValue.Type != JTokenType.Null)
                                                        {
                                                            string isOSDiskInstance = ((string)isOSDiskValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.IsOSDisk = isOSDiskInstance;
                                                        }
                                                        
                                                        JToken capacityInBytesValue = protectedDisksValue["capacityInBytes"];
                                                        if (capacityInBytesValue != null && capacityInBytesValue.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance = ((long)capacityInBytesValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.CapacityInBytes = capacityInBytesInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue = protectedDisksValue["logStorageAccountId"];
                                                        if (logStorageAccountIdValue != null && logStorageAccountIdValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance = ((string)logStorageAccountIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance;
                                                        }
                                                        
                                                        JToken logStorageAccountSasSecretNameValue = protectedDisksValue["logStorageAccountSasSecretName"];
                                                        if (logStorageAccountSasSecretNameValue != null && logStorageAccountSasSecretNameValue.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountSasSecretNameInstance = ((string)logStorageAccountSasSecretNameValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.LogStorageAccountSasSecretName = logStorageAccountSasSecretNameInstance;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue = protectedDisksValue["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue != null && seedManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance = ((string)seedManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedManagedDiskId = seedManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken seedBlobUriValue = protectedDisksValue["seedBlobUri"];
                                                        if (seedBlobUriValue != null && seedBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance = ((string)seedBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.SeedBlobUri = seedBlobUriInstance;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue = protectedDisksValue["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue != null && targetManagedDiskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance = ((string)targetManagedDiskIdValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetManagedDiskId = targetManagedDiskIdInstance;
                                                        }
                                                        
                                                        JToken targetBlobUriValue = protectedDisksValue["targetBlobUri"];
                                                        if (targetBlobUriValue != null && targetBlobUriValue.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance = ((string)targetBlobUriValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.TargetBlobUri = targetBlobUriInstance;
                                                        }
                                                        
                                                        JToken diskTypeValue = protectedDisksValue["diskType"];
                                                        if (diskTypeValue != null && diskTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance = ((string)diskTypeValue);
                                                            vMwareCbtProtectedDiskDetailsInstance.DiskType = diskTypeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken targetNetworkIdValue = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue != null && targetNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance = ((string)targetNetworkIdValue);
                                                    vMwareCbtMigrationDetailsInstance.TargetNetworkId = targetNetworkIdInstance;
                                                }
                                                
                                                JToken vmNicsArray = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray != null && vmNicsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue in ((JArray)vmNicsArray))
                                                    {
                                                        VMwareCbtNicDetails vMwareCbtNicDetailsInstance = new VMwareCbtNicDetails();
                                                        vMwareCbtMigrationDetailsInstance.VMNics.Add(vMwareCbtNicDetailsInstance);
                                                        
                                                        JToken nicIdValue = vmNicsValue["nicId"];
                                                        if (nicIdValue != null && nicIdValue.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance = ((string)nicIdValue);
                                                            vMwareCbtNicDetailsInstance.NicId = nicIdInstance;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue = vmNicsValue["isPrimaryNic"];
                                                        if (isPrimaryNicValue != null && isPrimaryNicValue.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance = ((string)isPrimaryNicValue);
                                                            vMwareCbtNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue = vmNicsValue["sourceIPAddress"];
                                                        if (sourceIPAddressValue != null && sourceIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance = ((string)sourceIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue = vmNicsValue["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue != null && sourceIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance = ((string)sourceIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue = vmNicsValue["sourceNetworkId"];
                                                        if (sourceNetworkIdValue != null && sourceNetworkIdValue.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance = ((string)sourceNetworkIdValue);
                                                            vMwareCbtNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressValue = vmNicsValue["targetIPAddress"];
                                                        if (targetIPAddressValue != null && targetIPAddressValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance = ((string)targetIPAddressValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddress = targetIPAddressInstance;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue = vmNicsValue["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue != null && targetIPAddressTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance = ((string)targetIPAddressTypeValue);
                                                            vMwareCbtNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue = vmNicsValue["targetSubnetName"];
                                                        if (targetSubnetNameValue != null && targetSubnetNameValue.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance = ((string)targetSubnetNameValue);
                                                            vMwareCbtNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue = vmNicsValue["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue != null && isSelectedForMigrationValue.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance = ((string)isSelectedForMigrationValue);
                                                            vMwareCbtNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken migrationRecoveryPointIdValue = providerSpecificDetailsValue["migrationRecoveryPointId"];
                                                if (migrationRecoveryPointIdValue != null && migrationRecoveryPointIdValue.Type != JTokenType.Null)
                                                {
                                                    string migrationRecoveryPointIdInstance = ((string)migrationRecoveryPointIdValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationRecoveryPointId = migrationRecoveryPointIdInstance;
                                                }
                                                
                                                JToken lastRecoveryPointReceivedValue = providerSpecificDetailsValue["lastRecoveryPointReceived"];
                                                if (lastRecoveryPointReceivedValue != null && lastRecoveryPointReceivedValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastRecoveryPointReceivedInstance = ((DateTime)lastRecoveryPointReceivedValue);
                                                    vMwareCbtMigrationDetailsInstance.LastRecoveryPointReceived = lastRecoveryPointReceivedInstance;
                                                }
                                                
                                                JToken initialSeedingProgressPercentageValue = providerSpecificDetailsValue["initialSeedingProgressPercentage"];
                                                if (initialSeedingProgressPercentageValue != null && initialSeedingProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int initialSeedingProgressPercentageInstance = ((int)initialSeedingProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.InitialSeedingProgressPercentage = initialSeedingProgressPercentageInstance;
                                                }
                                                
                                                JToken migrationProgressPercentageValue = providerSpecificDetailsValue["migrationProgressPercentage"];
                                                if (migrationProgressPercentageValue != null && migrationProgressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    int migrationProgressPercentageInstance = ((int)migrationProgressPercentageValue);
                                                    vMwareCbtMigrationDetailsInstance.MigrationProgressPercentage = migrationProgressPercentageInstance;
                                                }
                                                
                                                JToken instanceTypeValue = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue != null && instanceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance = ((string)instanceTypeValue);
                                                    vMwareCbtMigrationDetailsInstance.InstanceType = instanceTypeInstance;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = vMwareCbtMigrationDetailsInstance;
                                            }
                                            if (typeName == "InMageMigration")
                                            {
                                                InMageMigrationProviderSpecificDetails inMageMigrationProviderSpecificDetailsInstance = new InMageMigrationProviderSpecificDetails();
                                                
                                                JToken vmwareMachineIdValue2 = providerSpecificDetailsValue["vmwareMachineId"];
                                                if (vmwareMachineIdValue2 != null && vmwareMachineIdValue2.Type != JTokenType.Null)
                                                {
                                                    string vmwareMachineIdInstance2 = ((string)vmwareMachineIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.VMwareMachineId = vmwareMachineIdInstance2;
                                                }
                                                
                                                JToken processServerIdValue = providerSpecificDetailsValue["processServerId"];
                                                if (processServerIdValue != null && processServerIdValue.Type != JTokenType.Null)
                                                {
                                                    string processServerIdInstance = ((string)processServerIdValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.ProcessServerId = processServerIdInstance;
                                                }
                                                
                                                JToken osTypeValue2 = providerSpecificDetailsValue["osType"];
                                                if (osTypeValue2 != null && osTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string osTypeInstance2 = ((string)osTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.OSType = osTypeInstance2;
                                                }
                                                
                                                JToken licenseTypeValue2 = providerSpecificDetailsValue["licenseType"];
                                                if (licenseTypeValue2 != null && licenseTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string licenseTypeInstance2 = ((string)licenseTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LicenseType = licenseTypeInstance2;
                                                }
                                                
                                                JToken targetVmNameValue2 = providerSpecificDetailsValue["targetVmName"];
                                                if (targetVmNameValue2 != null && targetVmNameValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmNameInstance2 = ((string)targetVmNameValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmName = targetVmNameInstance2;
                                                }
                                                
                                                JToken targetVmSizeValue2 = providerSpecificDetailsValue["targetVmSize"];
                                                if (targetVmSizeValue2 != null && targetVmSizeValue2.Type != JTokenType.Null)
                                                {
                                                    string targetVmSizeInstance2 = ((string)targetVmSizeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetVmSize = targetVmSizeInstance2;
                                                }
                                                
                                                JToken targetLocationValue = providerSpecificDetailsValue["targetLocation"];
                                                if (targetLocationValue != null && targetLocationValue.Type != JTokenType.Null)
                                                {
                                                    string targetLocationInstance = ((string)targetLocationValue);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetLocation = targetLocationInstance;
                                                }
                                                
                                                JToken targetResourceGroupIdValue2 = providerSpecificDetailsValue["targetResourceGroupId"];
                                                if (targetResourceGroupIdValue2 != null && targetResourceGroupIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetResourceGroupIdInstance2 = ((string)targetResourceGroupIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetResourceGroupId = targetResourceGroupIdInstance2;
                                                }
                                                
                                                JToken targetAvailabilitySetIdValue2 = providerSpecificDetailsValue["targetAvailabilitySetId"];
                                                if (targetAvailabilitySetIdValue2 != null && targetAvailabilitySetIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetAvailabilitySetIdInstance2 = ((string)targetAvailabilitySetIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetAvailabilitySetId = targetAvailabilitySetIdInstance2;
                                                }
                                                
                                                JToken targetBootDiagnosticsStorageAccountIdValue2 = providerSpecificDetailsValue["targetBootDiagnosticsStorageAccountId"];
                                                if (targetBootDiagnosticsStorageAccountIdValue2 != null && targetBootDiagnosticsStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetBootDiagnosticsStorageAccountIdInstance2 = ((string)targetBootDiagnosticsStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountIdInstance2;
                                                }
                                                
                                                JToken targetNetworkIdValue2 = providerSpecificDetailsValue["targetNetworkId"];
                                                if (targetNetworkIdValue2 != null && targetNetworkIdValue2.Type != JTokenType.Null)
                                                {
                                                    string targetNetworkIdInstance2 = ((string)targetNetworkIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.TargetNetworkId = targetNetworkIdInstance2;
                                                }
                                                
                                                JToken logStorageAccountIdValue2 = providerSpecificDetailsValue["logStorageAccountId"];
                                                if (logStorageAccountIdValue2 != null && logStorageAccountIdValue2.Type != JTokenType.Null)
                                                {
                                                    string logStorageAccountIdInstance2 = ((string)logStorageAccountIdValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.LogStorageAccountId = logStorageAccountIdInstance2;
                                                }
                                                
                                                JToken protectedDisksArray2 = providerSpecificDetailsValue["protectedDisks"];
                                                if (protectedDisksArray2 != null && protectedDisksArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken protectedDisksValue2 in ((JArray)protectedDisksArray2))
                                                    {
                                                        InMageMigrationProtectedDiskDetails vMwareCbtProtectedDiskDetailsInstance2 = new InMageMigrationProtectedDiskDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.ProtectedDisks.Add(vMwareCbtProtectedDiskDetailsInstance2);
                                                        
                                                        JToken diskIdValue2 = protectedDisksValue2["diskId"];
                                                        if (diskIdValue2 != null && diskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskIdInstance2 = ((string)diskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskId = diskIdInstance2;
                                                        }
                                                        
                                                        JToken diskNameValue2 = protectedDisksValue2["diskName"];
                                                        if (diskNameValue2 != null && diskNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskNameInstance2 = ((string)diskNameValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskName = diskNameInstance2;
                                                        }
                                                        
                                                        JToken isOSDiskValue2 = protectedDisksValue2["isOSDisk"];
                                                        if (isOSDiskValue2 != null && isOSDiskValue2.Type != JTokenType.Null)
                                                        {
                                                            bool isOSDiskInstance2 = ((bool)isOSDiskValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.IsOSDisk = isOSDiskInstance2;
                                                        }
                                                        
                                                        JToken capacityInBytesValue2 = protectedDisksValue2["capacityInBytes"];
                                                        if (capacityInBytesValue2 != null && capacityInBytesValue2.Type != JTokenType.Null)
                                                        {
                                                            long capacityInBytesInstance2 = ((long)capacityInBytesValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.CapacityInBytes = capacityInBytesInstance2;
                                                        }
                                                        
                                                        JToken logStorageAccountIdValue3 = protectedDisksValue2["logStorageAccountId"];
                                                        if (logStorageAccountIdValue3 != null && logStorageAccountIdValue3.Type != JTokenType.Null)
                                                        {
                                                            string logStorageAccountIdInstance3 = ((string)logStorageAccountIdValue3);
                                                            vMwareCbtProtectedDiskDetailsInstance2.LogStorageAccountId = logStorageAccountIdInstance3;
                                                        }
                                                        
                                                        JToken seedManagedDiskIdValue2 = protectedDisksValue2["seedManagedDiskId"];
                                                        if (seedManagedDiskIdValue2 != null && seedManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedManagedDiskIdInstance2 = ((string)seedManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedManagedDiskId = seedManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken seedBlobUriValue2 = protectedDisksValue2["seedBlobUri"];
                                                        if (seedBlobUriValue2 != null && seedBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string seedBlobUriInstance2 = ((string)seedBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.SeedBlobUri = seedBlobUriInstance2;
                                                        }
                                                        
                                                        JToken targetManagedDiskIdValue2 = protectedDisksValue2["targetManagedDiskId"];
                                                        if (targetManagedDiskIdValue2 != null && targetManagedDiskIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetManagedDiskIdInstance2 = ((string)targetManagedDiskIdValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetManagedDiskId = targetManagedDiskIdInstance2;
                                                        }
                                                        
                                                        JToken targetBlobUriValue2 = protectedDisksValue2["targetBlobUri"];
                                                        if (targetBlobUriValue2 != null && targetBlobUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetBlobUriInstance2 = ((string)targetBlobUriValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.TargetBlobUri = targetBlobUriInstance2;
                                                        }
                                                        
                                                        JToken diskTypeValue2 = protectedDisksValue2["diskType"];
                                                        if (diskTypeValue2 != null && diskTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string diskTypeInstance2 = ((string)diskTypeValue2);
                                                            vMwareCbtProtectedDiskDetailsInstance2.DiskType = diskTypeInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken vmNicsArray2 = providerSpecificDetailsValue["vmNics"];
                                                if (vmNicsArray2 != null && vmNicsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vmNicsValue2 in ((JArray)vmNicsArray2))
                                                    {
                                                        InMageMigrationNicDetails inMageMigrationNicDetailsInstance = new InMageMigrationNicDetails();
                                                        inMageMigrationProviderSpecificDetailsInstance.VMNics.Add(inMageMigrationNicDetailsInstance);
                                                        
                                                        JToken nicIdValue2 = vmNicsValue2["nicId"];
                                                        if (nicIdValue2 != null && nicIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string nicIdInstance2 = ((string)nicIdValue2);
                                                            inMageMigrationNicDetailsInstance.NicId = nicIdInstance2;
                                                        }
                                                        
                                                        JToken isPrimaryNicValue2 = vmNicsValue2["isPrimaryNic"];
                                                        if (isPrimaryNicValue2 != null && isPrimaryNicValue2.Type != JTokenType.Null)
                                                        {
                                                            string isPrimaryNicInstance2 = ((string)isPrimaryNicValue2);
                                                            inMageMigrationNicDetailsInstance.IsPrimaryNic = isPrimaryNicInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressValue2 = vmNicsValue2["sourceIPAddress"];
                                                        if (sourceIPAddressValue2 != null && sourceIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressInstance2 = ((string)sourceIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddress = sourceIPAddressInstance2;
                                                        }
                                                        
                                                        JToken sourceIPAddressTypeValue2 = vmNicsValue2["sourceIPAddressType"];
                                                        if (sourceIPAddressTypeValue2 != null && sourceIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceIPAddressTypeInstance2 = ((string)sourceIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.SourceIPAddressType = sourceIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken sourceNetworkIdValue2 = vmNicsValue2["sourceNetworkId"];
                                                        if (sourceNetworkIdValue2 != null && sourceNetworkIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string sourceNetworkIdInstance2 = ((string)sourceNetworkIdValue2);
                                                            inMageMigrationNicDetailsInstance.SourceNetworkId = sourceNetworkIdInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressValue2 = vmNicsValue2["targetIPAddress"];
                                                        if (targetIPAddressValue2 != null && targetIPAddressValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressInstance2 = ((string)targetIPAddressValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddress = targetIPAddressInstance2;
                                                        }
                                                        
                                                        JToken targetIPAddressTypeValue2 = vmNicsValue2["targetIPAddressType"];
                                                        if (targetIPAddressTypeValue2 != null && targetIPAddressTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetIPAddressTypeInstance2 = ((string)targetIPAddressTypeValue2);
                                                            inMageMigrationNicDetailsInstance.TargetIPAddressType = targetIPAddressTypeInstance2;
                                                        }
                                                        
                                                        JToken targetSubnetNameValue2 = vmNicsValue2["targetSubnetName"];
                                                        if (targetSubnetNameValue2 != null && targetSubnetNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string targetSubnetNameInstance2 = ((string)targetSubnetNameValue2);
                                                            inMageMigrationNicDetailsInstance.TargetSubnetName = targetSubnetNameInstance2;
                                                        }
                                                        
                                                        JToken isSelectedForMigrationValue2 = vmNicsValue2["isSelectedForMigration"];
                                                        if (isSelectedForMigrationValue2 != null && isSelectedForMigrationValue2.Type != JTokenType.Null)
                                                        {
                                                            string isSelectedForMigrationInstance2 = ((string)isSelectedForMigrationValue2);
                                                            inMageMigrationNicDetailsInstance.IsSelectedForMigration = isSelectedForMigrationInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken instanceTypeValue2 = providerSpecificDetailsValue["instanceType"];
                                                if (instanceTypeValue2 != null && instanceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string instanceTypeInstance2 = ((string)instanceTypeValue2);
                                                    inMageMigrationProviderSpecificDetailsInstance.InstanceType = instanceTypeInstance2;
                                                }
                                                propertiesInstance.ProviderSpecificDetails = inMageMigrationProviderSpecificDetailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationItemInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationItemInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            migrationItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Migrate input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> MigrateAsync(string fabricName, string protectionContainerName, string migrationItemName, MigrateInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "MigrateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginMigrateAsync(fabricName, protectionContainerName, migrationItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetMigrateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetMigrateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get a specific recovery point for a migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='migrationRecoveryPointName'>
        /// Required. Recovery point name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for migration recovery point object.
        /// </returns>
        public async Task<MigrationRecoveryPointResponse> RecoveryPointGetAsync(string fabricName, string protectionContainerName, string migrationItemName, string migrationRecoveryPointName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            if (migrationRecoveryPointName == null)
            {
                throw new ArgumentNullException("migrationRecoveryPointName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("migrationRecoveryPointName", migrationRecoveryPointName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RecoveryPointGetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            url = url + "/migrationRecoveryPoints/";
            url = url + Uri.EscapeDataString(migrationRecoveryPointName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationRecoveryPointResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationRecoveryPointResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            MigrationRecoveryPoint migrationRecoveryPointInstance = new MigrationRecoveryPoint();
                            result.MigrationRecoveryPoint = migrationRecoveryPointInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                MigrationRecoveryPointProperties propertiesInstance = new MigrationRecoveryPointProperties();
                                migrationRecoveryPointInstance.Properties = propertiesInstance;
                                
                                JToken recoveryPointTimeValue = propertiesValue["recoveryPointTime"];
                                if (recoveryPointTimeValue != null && recoveryPointTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime recoveryPointTimeInstance = ((DateTime)recoveryPointTimeValue);
                                    propertiesInstance.RecoveryPointTime = recoveryPointTimeInstance;
                                }
                                
                                JToken recoveryPointTypeValue = propertiesValue["recoveryPointType"];
                                if (recoveryPointTypeValue != null && recoveryPointTypeValue.Type != JTokenType.Null)
                                {
                                    string recoveryPointTypeInstance = ((string)recoveryPointTypeValue);
                                    propertiesInstance.RecoveryPointType = recoveryPointTypeInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                migrationRecoveryPointInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                migrationRecoveryPointInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                migrationRecoveryPointInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                migrationRecoveryPointInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    migrationRecoveryPointInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get all recovery points for a migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for a list of migration recovery points.
        /// </returns>
        public async Task<MigrationRecoveryPointListResponse> RecoveryPointListAsync(string fabricName, string protectionContainerName, string migrationItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (migrationItemName == null)
            {
                throw new ArgumentNullException("migrationItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RecoveryPointListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationMigrationItems/";
            url = url + Uri.EscapeDataString(migrationItemName);
            url = url + "/migrationRecoveryPoints";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-07-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationRecoveryPointListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationRecoveryPointListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    MigrationRecoveryPoint migrationRecoveryPointInstance = new MigrationRecoveryPoint();
                                    result.MigrationRecoveryPoints.Add(migrationRecoveryPointInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        MigrationRecoveryPointProperties propertiesInstance = new MigrationRecoveryPointProperties();
                                        migrationRecoveryPointInstance.Properties = propertiesInstance;
                                        
                                        JToken recoveryPointTimeValue = propertiesValue["recoveryPointTime"];
                                        if (recoveryPointTimeValue != null && recoveryPointTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime recoveryPointTimeInstance = ((DateTime)recoveryPointTimeValue);
                                            propertiesInstance.RecoveryPointTime = recoveryPointTimeInstance;
                                        }
                                        
                                        JToken recoveryPointTypeValue = propertiesValue["recoveryPointType"];
                                        if (recoveryPointTypeValue != null && recoveryPointTypeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryPointTypeInstance = ((string)recoveryPointTypeValue);
                                            propertiesInstance.RecoveryPointType = recoveryPointTypeInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        migrationRecoveryPointInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        migrationRecoveryPointInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        migrationRecoveryPointInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        migrationRecoveryPointInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            migrationRecoveryPointInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute test migration for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test migrate input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestMigrateAsync(string fabricName, string protectionContainerName, string migrationItemName, TestMigrateInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestMigrateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginTestMigrateAsync(fabricName, protectionContainerName, migrationItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetTestMigrateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetTestMigrateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute test migrate cleanup for the given item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test migrate cleanup input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestMigrateCleanupAsync(string fabricName, string protectionContainerName, string migrationItemName, TestMigrateCleanupInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestMigrateCleanupAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginTestMigrateCleanupAsync(fabricName, protectionContainerName, migrationItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetTestMigrateCleanupStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetTestMigrateCleanupStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Updates the given migration item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='migrationItemName'>
        /// Required. Migration item name.
        /// </param>
        /// <param name='input'>
        /// Required. Updation input
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UpdateMigrationItemAsync(string fabricName, string protectionContainerName, string migrationItemName, UpdateMigrationItemInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("migrationItemName", migrationItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateMigrationItemAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.MigrationItem.BeginUpdateMigrationItemAsync(fabricName, protectionContainerName, migrationItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            MigrationItemOperationResponse result = await client.MigrationItem.GetUpdateMigrationItemStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.MigrationItem.GetUpdateMigrationItemStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
