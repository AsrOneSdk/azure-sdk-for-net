// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Protection Container operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class ProtectionContainerOperations : IServiceOperations<SiteRecoveryManagementClient>, IProtectionContainerOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionContainerOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionContainerOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the protected container by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection Container Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Protection Container object.
        /// </returns>
        public async Task<ProtectionContainerResponse> GetAsync(string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                            result.ProtectionContainer = protectionContainerInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ProtectionContainerProperties propertiesInstance = new ProtectionContainerProperties();
                                protectionContainerInstance.Properties = propertiesInstance;
                                
                                JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                    propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                }
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedPECountValue = propertiesValue["protectedPECount"];
                                if (protectedPECountValue != null && protectedPECountValue.Type != JTokenType.Null)
                                {
                                    string protectedPECountInstance = ((string)protectedPECountValue);
                                    propertiesInstance.ProtectedPECount = protectedPECountInstance;
                                }
                                
                                JToken blockUnpairingPECountValue = propertiesValue["blockUnpairingPECount"];
                                if (blockUnpairingPECountValue != null && blockUnpairingPECountValue.Type != JTokenType.Null)
                                {
                                    string blockUnpairingPECountInstance = ((string)blockUnpairingPECountValue);
                                    propertiesInstance.BlockUnpairingPECount = blockUnpairingPECountInstance;
                                }
                                
                                JToken protectedRGCountValue = propertiesValue["protectedRGCount"];
                                if (protectedRGCountValue != null && protectedRGCountValue.Type != JTokenType.Null)
                                {
                                    string protectedRGCountInstance = ((string)protectedRGCountValue);
                                    propertiesInstance.ProtectedRGCount = protectedRGCountInstance;
                                }
                                
                                JToken blockUnpairingRGCountValue = propertiesValue["blockUnpairingRGCount"];
                                if (blockUnpairingRGCountValue != null && blockUnpairingRGCountValue.Type != JTokenType.Null)
                                {
                                    string blockUnpairingRGCountInstance = ((string)blockUnpairingRGCountValue);
                                    propertiesInstance.BlockUnpairingRGCount = blockUnpairingRGCountInstance;
                                }
                                
                                JToken availableReplicationProvidersArray = propertiesValue["availableReplicationProviders"];
                                if (availableReplicationProvidersArray != null && availableReplicationProvidersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken availableReplicationProvidersValue in ((JArray)availableReplicationProvidersArray))
                                    {
                                        ReplicationProviders replicationProvidersInstance = new ReplicationProviders();
                                        propertiesInstance.AvailableReplicationProviders.Add(replicationProvidersInstance);
                                        
                                        JToken replicationProviderNameValue = availableReplicationProvidersValue["replicationProviderName"];
                                        if (replicationProviderNameValue != null && replicationProviderNameValue.Type != JTokenType.Null)
                                        {
                                            string replicationProviderNameInstance = ((string)replicationProviderNameValue);
                                            replicationProvidersInstance.ReplicationProviderName = replicationProviderNameInstance;
                                        }
                                    }
                                }
                                
                                JToken backedByFabricValue = propertiesValue["backedByFabric"];
                                if (backedByFabricValue != null && backedByFabricValue.Type != JTokenType.Null)
                                {
                                    string backedByFabricInstance = ((string)backedByFabricValue);
                                    propertiesInstance.FabricBackingStatus = backedByFabricInstance;
                                }
                                
                                JToken pairingDetailsArray = propertiesValue["pairingDetails"];
                                if (pairingDetailsArray != null && pairingDetailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken pairingDetailsValue in ((JArray)pairingDetailsArray))
                                    {
                                        PairingDetails pairingDetailsInstance = new PairingDetails();
                                        propertiesInstance.AssociationDetails.Add(pairingDetailsInstance);
                                        
                                        JToken pairedProtectionContainerIdValue = pairingDetailsValue["pairedProtectionContainerId"];
                                        if (pairedProtectionContainerIdValue != null && pairedProtectionContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string pairedProtectionContainerIdInstance = ((string)pairedProtectionContainerIdValue);
                                            pairingDetailsInstance.PairedProtectionContainerArmId = pairedProtectionContainerIdInstance;
                                        }
                                        
                                        JToken pairedProtectionContainerFriendlyNameValue = pairingDetailsValue["pairedProtectionContainerFriendlyName"];
                                        if (pairedProtectionContainerFriendlyNameValue != null && pairedProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string pairedProtectionContainerFriendlyNameInstance = ((string)pairedProtectionContainerFriendlyNameValue);
                                            pairingDetailsInstance.PairedProtectionContainerFriendlyName = pairedProtectionContainerFriendlyNameInstance;
                                        }
                                        
                                        JToken pairedFabricFriendlyNameValue = pairingDetailsValue["pairedFabricFriendlyName"];
                                        if (pairedFabricFriendlyNameValue != null && pairedFabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string pairedFabricFriendlyNameInstance = ((string)pairedFabricFriendlyNameValue);
                                            pairingDetailsInstance.PairedFabricFriendlyName = pairedFabricFriendlyNameInstance;
                                        }
                                        
                                        JToken roleValue = pairingDetailsValue["role"];
                                        if (roleValue != null && roleValue.Type != JTokenType.Null)
                                        {
                                            string roleInstance = ((string)roleValue);
                                            pairingDetailsInstance.Role = roleInstance;
                                        }
                                        
                                        JToken providerSpecificSettingsValue = pairingDetailsValue["providerSpecificSettings"];
                                        if (providerSpecificSettingsValue != null && providerSpecificSettingsValue.Type != JTokenType.Null)
                                        {
                                            string providerSpecificSettingsInstance = ((string)providerSpecificSettingsValue);
                                            pairingDetailsInstance.ProviderSpecificSettings = providerSpecificSettingsInstance;
                                        }
                                        
                                        JToken healthValue = pairingDetailsValue["health"];
                                        if (healthValue != null && healthValue.Type != JTokenType.Null)
                                        {
                                            string healthInstance = ((string)healthValue);
                                            pairingDetailsInstance.Health = healthInstance;
                                        }
                                        
                                        JToken healthErrorDetailsArray = pairingDetailsValue["healthErrorDetails"];
                                        if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                pairingDetailsInstance.HealthErrorDetails.Add(healthErrorInstance);
                                                
                                                JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken policyDetailsArray = pairingDetailsValue["policyDetails"];
                                        if (policyDetailsArray != null && policyDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken policyDetailsValue in ((JArray)policyDetailsArray))
                                            {
                                                PolicyDetails policyDetailsInstance = new PolicyDetails();
                                                pairingDetailsInstance.PairedPolicyDetails.Add(policyDetailsInstance);
                                                
                                                JToken policyIdValue = policyDetailsValue["policyId"];
                                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                                {
                                                    string policyIdInstance = ((string)policyIdValue);
                                                    policyDetailsInstance.PolicyArmId = policyIdInstance;
                                                }
                                                
                                                JToken associationStatusValue = policyDetailsValue["associationStatus"];
                                                if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                                {
                                                    string associationStatusInstance = ((string)associationStatusValue);
                                                    policyDetailsInstance.AssociationStatus = associationStatusInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                protectionContainerInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                protectionContainerInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                protectionContainerInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                protectionContainerInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    protectionContainerInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all ProtectionContainers for the given server.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list ProtectionContainers operation.
        /// </returns>
        public async Task<ProtectionContainerListResponse> ListAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "SiteRecoveryVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                                    result.ProtectionContainers.Add(protectionContainerInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ProtectionContainerProperties propertiesInstance = new ProtectionContainerProperties();
                                        protectionContainerInstance.Properties = propertiesInstance;
                                        
                                        JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                        if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                            propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                        }
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedPECountValue = propertiesValue["protectedPECount"];
                                        if (protectedPECountValue != null && protectedPECountValue.Type != JTokenType.Null)
                                        {
                                            string protectedPECountInstance = ((string)protectedPECountValue);
                                            propertiesInstance.ProtectedPECount = protectedPECountInstance;
                                        }
                                        
                                        JToken blockUnpairingPECountValue = propertiesValue["blockUnpairingPECount"];
                                        if (blockUnpairingPECountValue != null && blockUnpairingPECountValue.Type != JTokenType.Null)
                                        {
                                            string blockUnpairingPECountInstance = ((string)blockUnpairingPECountValue);
                                            propertiesInstance.BlockUnpairingPECount = blockUnpairingPECountInstance;
                                        }
                                        
                                        JToken protectedRGCountValue = propertiesValue["protectedRGCount"];
                                        if (protectedRGCountValue != null && protectedRGCountValue.Type != JTokenType.Null)
                                        {
                                            string protectedRGCountInstance = ((string)protectedRGCountValue);
                                            propertiesInstance.ProtectedRGCount = protectedRGCountInstance;
                                        }
                                        
                                        JToken blockUnpairingRGCountValue = propertiesValue["blockUnpairingRGCount"];
                                        if (blockUnpairingRGCountValue != null && blockUnpairingRGCountValue.Type != JTokenType.Null)
                                        {
                                            string blockUnpairingRGCountInstance = ((string)blockUnpairingRGCountValue);
                                            propertiesInstance.BlockUnpairingRGCount = blockUnpairingRGCountInstance;
                                        }
                                        
                                        JToken availableReplicationProvidersArray = propertiesValue["availableReplicationProviders"];
                                        if (availableReplicationProvidersArray != null && availableReplicationProvidersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken availableReplicationProvidersValue in ((JArray)availableReplicationProvidersArray))
                                            {
                                                ReplicationProviders replicationProvidersInstance = new ReplicationProviders();
                                                propertiesInstance.AvailableReplicationProviders.Add(replicationProvidersInstance);
                                                
                                                JToken replicationProviderNameValue = availableReplicationProvidersValue["replicationProviderName"];
                                                if (replicationProviderNameValue != null && replicationProviderNameValue.Type != JTokenType.Null)
                                                {
                                                    string replicationProviderNameInstance = ((string)replicationProviderNameValue);
                                                    replicationProvidersInstance.ReplicationProviderName = replicationProviderNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken backedByFabricValue = propertiesValue["backedByFabric"];
                                        if (backedByFabricValue != null && backedByFabricValue.Type != JTokenType.Null)
                                        {
                                            string backedByFabricInstance = ((string)backedByFabricValue);
                                            propertiesInstance.FabricBackingStatus = backedByFabricInstance;
                                        }
                                        
                                        JToken pairingDetailsArray = propertiesValue["pairingDetails"];
                                        if (pairingDetailsArray != null && pairingDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken pairingDetailsValue in ((JArray)pairingDetailsArray))
                                            {
                                                PairingDetails pairingDetailsInstance = new PairingDetails();
                                                propertiesInstance.AssociationDetails.Add(pairingDetailsInstance);
                                                
                                                JToken pairedProtectionContainerIdValue = pairingDetailsValue["pairedProtectionContainerId"];
                                                if (pairedProtectionContainerIdValue != null && pairedProtectionContainerIdValue.Type != JTokenType.Null)
                                                {
                                                    string pairedProtectionContainerIdInstance = ((string)pairedProtectionContainerIdValue);
                                                    pairingDetailsInstance.PairedProtectionContainerArmId = pairedProtectionContainerIdInstance;
                                                }
                                                
                                                JToken pairedProtectionContainerFriendlyNameValue = pairingDetailsValue["pairedProtectionContainerFriendlyName"];
                                                if (pairedProtectionContainerFriendlyNameValue != null && pairedProtectionContainerFriendlyNameValue.Type != JTokenType.Null)
                                                {
                                                    string pairedProtectionContainerFriendlyNameInstance = ((string)pairedProtectionContainerFriendlyNameValue);
                                                    pairingDetailsInstance.PairedProtectionContainerFriendlyName = pairedProtectionContainerFriendlyNameInstance;
                                                }
                                                
                                                JToken pairedFabricFriendlyNameValue = pairingDetailsValue["pairedFabricFriendlyName"];
                                                if (pairedFabricFriendlyNameValue != null && pairedFabricFriendlyNameValue.Type != JTokenType.Null)
                                                {
                                                    string pairedFabricFriendlyNameInstance = ((string)pairedFabricFriendlyNameValue);
                                                    pairingDetailsInstance.PairedFabricFriendlyName = pairedFabricFriendlyNameInstance;
                                                }
                                                
                                                JToken roleValue = pairingDetailsValue["role"];
                                                if (roleValue != null && roleValue.Type != JTokenType.Null)
                                                {
                                                    string roleInstance = ((string)roleValue);
                                                    pairingDetailsInstance.Role = roleInstance;
                                                }
                                                
                                                JToken providerSpecificSettingsValue = pairingDetailsValue["providerSpecificSettings"];
                                                if (providerSpecificSettingsValue != null && providerSpecificSettingsValue.Type != JTokenType.Null)
                                                {
                                                    string providerSpecificSettingsInstance = ((string)providerSpecificSettingsValue);
                                                    pairingDetailsInstance.ProviderSpecificSettings = providerSpecificSettingsInstance;
                                                }
                                                
                                                JToken healthValue = pairingDetailsValue["health"];
                                                if (healthValue != null && healthValue.Type != JTokenType.Null)
                                                {
                                                    string healthInstance = ((string)healthValue);
                                                    pairingDetailsInstance.Health = healthInstance;
                                                }
                                                
                                                JToken healthErrorDetailsArray = pairingDetailsValue["healthErrorDetails"];
                                                if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                                    {
                                                        HealthError healthErrorInstance = new HealthError();
                                                        pairingDetailsInstance.HealthErrorDetails.Add(healthErrorInstance);
                                                        
                                                        JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance = ((string)errorLevelValue);
                                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                        }
                                                        
                                                        JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance = ((string)errorCodeValue);
                                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                                        }
                                                        
                                                        JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance = ((string)errorMessageValue);
                                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                        }
                                                        
                                                        JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                        }
                                                        
                                                        JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                        {
                                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                        }
                                                        
                                                        JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance = ((string)entityIdValue);
                                                            healthErrorInstance.EntityId = entityIdInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken policyDetailsArray = pairingDetailsValue["policyDetails"];
                                                if (policyDetailsArray != null && policyDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken policyDetailsValue in ((JArray)policyDetailsArray))
                                                    {
                                                        PolicyDetails policyDetailsInstance = new PolicyDetails();
                                                        pairingDetailsInstance.PairedPolicyDetails.Add(policyDetailsInstance);
                                                        
                                                        JToken policyIdValue = policyDetailsValue["policyId"];
                                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                                        {
                                                            string policyIdInstance = ((string)policyIdValue);
                                                            policyDetailsInstance.PolicyArmId = policyIdInstance;
                                                        }
                                                        
                                                        JToken associationStatusValue = policyDetailsValue["associationStatus"];
                                                        if (associationStatusValue != null && associationStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string associationStatusInstance = ((string)associationStatusValue);
                                                            policyDetailsInstance.AssociationStatus = associationStatusInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectionContainerInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        protectionContainerInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectionContainerInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectionContainerInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectionContainerInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
