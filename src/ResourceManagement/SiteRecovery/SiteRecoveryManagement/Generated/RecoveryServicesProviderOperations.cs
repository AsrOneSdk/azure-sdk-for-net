// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of provider operations for the Site Recovery extension.
    /// </summary>
    internal partial class RecoveryServicesProviderOperations : IServiceOperations<SiteRecoveryManagementClient>, IRecoveryServicesProviderOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesProviderOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RecoveryServicesProviderOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a RSP.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create RSP.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCreatingAsync(string fabricName, string providerName, RecoveryServicesProviderCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders/";
            url = url + Uri.EscapeDataString(providerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject recoveryServicesProviderCreationInputValue = new JObject();
                requestDoc = recoveryServicesProviderCreationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    recoveryServicesProviderCreationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.MachineName != null)
                    {
                        propertiesValue["machineName"] = input.Properties.MachineName;
                    }
                    
                    if (input.Properties.AuthenticationIdentityInput != null)
                    {
                        JObject authenticationIdentityInputValue = new JObject();
                        propertiesValue["authenticationIdentityInput"] = authenticationIdentityInputValue;
                        
                        if (input.Properties.AuthenticationIdentityInput.TenantId != null)
                        {
                            authenticationIdentityInputValue["tenantId"] = input.Properties.AuthenticationIdentityInput.TenantId;
                        }
                        
                        if (input.Properties.AuthenticationIdentityInput.ApplicationId != null)
                        {
                            authenticationIdentityInputValue["applicationId"] = input.Properties.AuthenticationIdentityInput.ApplicationId;
                        }
                        
                        if (input.Properties.AuthenticationIdentityInput.ObjectId != null)
                        {
                            authenticationIdentityInputValue["objectId"] = input.Properties.AuthenticationIdentityInput.ObjectId;
                        }
                        
                        if (input.Properties.AuthenticationIdentityInput.Audience != null)
                        {
                            authenticationIdentityInputValue["audience"] = input.Properties.AuthenticationIdentityInput.Audience;
                        }
                        
                        if (input.Properties.AuthenticationIdentityInput.AadAuthority != null)
                        {
                            authenticationIdentityInputValue["aadAuthority"] = input.Properties.AuthenticationIdentityInput.AadAuthority;
                        }
                    }
                    
                    if (input.Properties.ResourceAccessIdentityInput != null)
                    {
                        JObject resourceAccessIdentityInputValue = new JObject();
                        propertiesValue["resourceAccessIdentityInput"] = resourceAccessIdentityInputValue;
                        
                        if (input.Properties.ResourceAccessIdentityInput.TenantId != null)
                        {
                            resourceAccessIdentityInputValue["tenantId"] = input.Properties.ResourceAccessIdentityInput.TenantId;
                        }
                        
                        if (input.Properties.ResourceAccessIdentityInput.ApplicationId != null)
                        {
                            resourceAccessIdentityInputValue["applicationId"] = input.Properties.ResourceAccessIdentityInput.ApplicationId;
                        }
                        
                        if (input.Properties.ResourceAccessIdentityInput.ObjectId != null)
                        {
                            resourceAccessIdentityInputValue["objectId"] = input.Properties.ResourceAccessIdentityInput.ObjectId;
                        }
                        
                        if (input.Properties.ResourceAccessIdentityInput.Audience != null)
                        {
                            resourceAccessIdentityInputValue["audience"] = input.Properties.ResourceAccessIdentityInput.Audience;
                        }
                        
                        if (input.Properties.ResourceAccessIdentityInput.AadAuthority != null)
                        {
                            resourceAccessIdentityInputValue["aadAuthority"] = input.Properties.ResourceAccessIdentityInput.AadAuthority;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeletingAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders/";
            url = url + Uri.EscapeDataString(providerName);
            url = url + "/remove";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Purges a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPurgingAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPurgingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders/";
            url = url + Uri.EscapeDataString(providerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Refreshes a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Name of provider
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginRefreshingAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginRefreshingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders/";
            url = url + Uri.EscapeDataString(providerName);
            url = url + "/RefreshProvider";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a RSP.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='input'>
        /// Required. Input to create RSP.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CreateAsync(string fabricName, string providerName, RecoveryServicesProviderCreationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryServicesProvider.BeginCreatingAsync(fabricName, providerName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            RecoveryServicesProviderOperationResponse result = await client.RecoveryServicesProvider.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryServicesProvider.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryServicesProvider.BeginDeletingAsync(fabricName, providerName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.RecoveryServicesProvider.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryServicesProvider.GetDeleteStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the server object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the provider object
        /// </returns>
        public async Task<RecoveryServicesProviderResponse> GetAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (providerName == null)
            {
                throw new ArgumentNullException("providerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders/";
            url = url + Uri.EscapeDataString(providerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryServicesProviderResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryServicesProviderResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryServicesProvider recoveryServicesProviderInstance = new RecoveryServicesProvider();
                            result.RecoveryServicesProvider = recoveryServicesProviderInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryServicesProviderProperties propertiesInstance = new RecoveryServicesProviderProperties();
                                recoveryServicesProviderInstance.Properties = propertiesInstance;
                                
                                JToken fabricTypeValue = propertiesValue["fabricType"];
                                if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                {
                                    string fabricTypeInstance = ((string)fabricTypeValue);
                                    propertiesInstance.FabricType = fabricTypeInstance;
                                }
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                    propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                }
                                
                                JToken providerVersionValue = propertiesValue["providerVersion"];
                                if (providerVersionValue != null && providerVersionValue.Type != JTokenType.Null)
                                {
                                    string providerVersionInstance = ((string)providerVersionValue);
                                    propertiesInstance.ProviderVersion = providerVersionInstance;
                                }
                                
                                JToken serverVersionValue = propertiesValue["serverVersion"];
                                if (serverVersionValue != null && serverVersionValue.Type != JTokenType.Null)
                                {
                                    string serverVersionInstance = ((string)serverVersionValue);
                                    propertiesInstance.ServerVersion = serverVersionInstance;
                                }
                                
                                JToken providerVersionStateValue = propertiesValue["providerVersionState"];
                                if (providerVersionStateValue != null && providerVersionStateValue.Type != JTokenType.Null)
                                {
                                    string providerVersionStateInstance = ((string)providerVersionStateValue);
                                    propertiesInstance.ProviderVersionState = providerVersionStateInstance;
                                }
                                
                                JToken providerVersionExpiryDateValue = propertiesValue["providerVersionExpiryDate"];
                                if (providerVersionExpiryDateValue != null && providerVersionExpiryDateValue.Type != JTokenType.Null)
                                {
                                    DateTime providerVersionExpiryDateInstance = ((DateTime)providerVersionExpiryDateValue);
                                    propertiesInstance.ProviderVersionExpiryDate = providerVersionExpiryDateInstance;
                                }
                                
                                JToken providerVersionDetailsValue = propertiesValue["providerVersionDetails"];
                                if (providerVersionDetailsValue != null && providerVersionDetailsValue.Type != JTokenType.Null)
                                {
                                    VersionDetails providerVersionDetailsInstance = new VersionDetails();
                                    propertiesInstance.ProviderVersionDetails = providerVersionDetailsInstance;
                                    
                                    JToken versionValue = providerVersionDetailsValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        providerVersionDetailsInstance.Version = versionInstance;
                                    }
                                    
                                    JToken expiryDateValue = providerVersionDetailsValue["expiryDate"];
                                    if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                        providerVersionDetailsInstance.ExpiryDate = expiryDateInstance;
                                    }
                                    
                                    JToken statusValue = providerVersionDetailsValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        providerVersionDetailsInstance.Status = statusInstance;
                                    }
                                }
                                
                                JToken lastHeartBeatValue = propertiesValue["lastHeartBeat"];
                                if (lastHeartBeatValue != null && lastHeartBeatValue.Type != JTokenType.Null)
                                {
                                    DateTime lastHeartBeatInstance = ((DateTime)lastHeartBeatValue);
                                    propertiesInstance.LastHeartbeat = lastHeartBeatInstance;
                                }
                                
                                JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                {
                                    string connectionStatusInstance = ((string)connectionStatusValue);
                                    propertiesInstance.ConnectionStatus = connectionStatusInstance;
                                }
                                
                                JToken allowedScenariosArray = propertiesValue["allowedScenarios"];
                                if (allowedScenariosArray != null && allowedScenariosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedScenariosValue in ((JArray)allowedScenariosArray))
                                    {
                                        propertiesInstance.AllowedScenarios.Add(((string)allowedScenariosValue));
                                    }
                                }
                                
                                JToken protectedItemCountValue = propertiesValue["protectedItemCount"];
                                if (protectedItemCountValue != null && protectedItemCountValue.Type != JTokenType.Null)
                                {
                                    int protectedItemCountInstance = ((int)protectedItemCountValue);
                                    propertiesInstance.ProtectedItemCount = protectedItemCountInstance;
                                }
                                
                                JToken healthErrorDetailsArray = propertiesValue["healthErrorDetails"];
                                if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrorDetails.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorDetailsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorDetailsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorDetailsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorDetailsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorDetailsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken authenticationIdentityDetailsValue = propertiesValue["authenticationIdentityDetails"];
                                if (authenticationIdentityDetailsValue != null && authenticationIdentityDetailsValue.Type != JTokenType.Null)
                                {
                                    IdentityProviderDetails authenticationIdentityDetailsInstance = new IdentityProviderDetails();
                                    propertiesInstance.AuthenticationIdentityInput = authenticationIdentityDetailsInstance;
                                    
                                    JToken tenantIdValue = authenticationIdentityDetailsValue["tenantId"];
                                    if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                    {
                                        string tenantIdInstance = ((string)tenantIdValue);
                                        authenticationIdentityDetailsInstance.TenantId = tenantIdInstance;
                                    }
                                    
                                    JToken applicationIdValue = authenticationIdentityDetailsValue["applicationId"];
                                    if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance = ((string)applicationIdValue);
                                        authenticationIdentityDetailsInstance.ApplicationId = applicationIdInstance;
                                    }
                                    
                                    JToken objectIdValue = authenticationIdentityDetailsValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        authenticationIdentityDetailsInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken audienceValue = authenticationIdentityDetailsValue["audience"];
                                    if (audienceValue != null && audienceValue.Type != JTokenType.Null)
                                    {
                                        string audienceInstance = ((string)audienceValue);
                                        authenticationIdentityDetailsInstance.Audience = audienceInstance;
                                    }
                                    
                                    JToken aadAuthorityValue = authenticationIdentityDetailsValue["aadAuthority"];
                                    if (aadAuthorityValue != null && aadAuthorityValue.Type != JTokenType.Null)
                                    {
                                        string aadAuthorityInstance = ((string)aadAuthorityValue);
                                        authenticationIdentityDetailsInstance.AadAuthority = aadAuthorityInstance;
                                    }
                                }
                                
                                JToken resourceAccessIdentityDetailsValue = propertiesValue["resourceAccessIdentityDetails"];
                                if (resourceAccessIdentityDetailsValue != null && resourceAccessIdentityDetailsValue.Type != JTokenType.Null)
                                {
                                    IdentityProviderDetails resourceAccessIdentityDetailsInstance = new IdentityProviderDetails();
                                    propertiesInstance.ResourceAccessIdentityInput = resourceAccessIdentityDetailsInstance;
                                    
                                    JToken tenantIdValue2 = resourceAccessIdentityDetailsValue["tenantId"];
                                    if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                    {
                                        string tenantIdInstance2 = ((string)tenantIdValue2);
                                        resourceAccessIdentityDetailsInstance.TenantId = tenantIdInstance2;
                                    }
                                    
                                    JToken applicationIdValue2 = resourceAccessIdentityDetailsValue["applicationId"];
                                    if (applicationIdValue2 != null && applicationIdValue2.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance2 = ((string)applicationIdValue2);
                                        resourceAccessIdentityDetailsInstance.ApplicationId = applicationIdInstance2;
                                    }
                                    
                                    JToken objectIdValue2 = resourceAccessIdentityDetailsValue["objectId"];
                                    if (objectIdValue2 != null && objectIdValue2.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance2 = ((string)objectIdValue2);
                                        resourceAccessIdentityDetailsInstance.ObjectId = objectIdInstance2;
                                    }
                                    
                                    JToken audienceValue2 = resourceAccessIdentityDetailsValue["audience"];
                                    if (audienceValue2 != null && audienceValue2.Type != JTokenType.Null)
                                    {
                                        string audienceInstance2 = ((string)audienceValue2);
                                        resourceAccessIdentityDetailsInstance.Audience = audienceInstance2;
                                    }
                                    
                                    JToken aadAuthorityValue2 = resourceAccessIdentityDetailsValue["aadAuthority"];
                                    if (aadAuthorityValue2 != null && aadAuthorityValue2.Type != JTokenType.Null)
                                    {
                                        string aadAuthorityInstance2 = ((string)aadAuthorityValue2);
                                        resourceAccessIdentityDetailsInstance.AadAuthority = aadAuthorityInstance2;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                recoveryServicesProviderInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryServicesProviderInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryServicesProviderInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryServicesProviderInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryServicesProviderInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for recovery services provider long
        /// running operations.
        /// </returns>
        public async Task<RecoveryServicesProviderOperationResponse> GetCreateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryServicesProviderOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryServicesProviderOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryServicesProvider recoveryServicesProviderInstance = new RecoveryServicesProvider();
                            result.RecoveryServicesProvider = recoveryServicesProviderInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecoveryServicesProviderProperties propertiesInstance = new RecoveryServicesProviderProperties();
                                recoveryServicesProviderInstance.Properties = propertiesInstance;
                                
                                JToken fabricTypeValue = propertiesValue["fabricType"];
                                if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                {
                                    string fabricTypeInstance = ((string)fabricTypeValue);
                                    propertiesInstance.FabricType = fabricTypeInstance;
                                }
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                    propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                }
                                
                                JToken providerVersionValue = propertiesValue["providerVersion"];
                                if (providerVersionValue != null && providerVersionValue.Type != JTokenType.Null)
                                {
                                    string providerVersionInstance = ((string)providerVersionValue);
                                    propertiesInstance.ProviderVersion = providerVersionInstance;
                                }
                                
                                JToken serverVersionValue = propertiesValue["serverVersion"];
                                if (serverVersionValue != null && serverVersionValue.Type != JTokenType.Null)
                                {
                                    string serverVersionInstance = ((string)serverVersionValue);
                                    propertiesInstance.ServerVersion = serverVersionInstance;
                                }
                                
                                JToken providerVersionStateValue = propertiesValue["providerVersionState"];
                                if (providerVersionStateValue != null && providerVersionStateValue.Type != JTokenType.Null)
                                {
                                    string providerVersionStateInstance = ((string)providerVersionStateValue);
                                    propertiesInstance.ProviderVersionState = providerVersionStateInstance;
                                }
                                
                                JToken providerVersionExpiryDateValue = propertiesValue["providerVersionExpiryDate"];
                                if (providerVersionExpiryDateValue != null && providerVersionExpiryDateValue.Type != JTokenType.Null)
                                {
                                    DateTime providerVersionExpiryDateInstance = ((DateTime)providerVersionExpiryDateValue);
                                    propertiesInstance.ProviderVersionExpiryDate = providerVersionExpiryDateInstance;
                                }
                                
                                JToken providerVersionDetailsValue = propertiesValue["providerVersionDetails"];
                                if (providerVersionDetailsValue != null && providerVersionDetailsValue.Type != JTokenType.Null)
                                {
                                    VersionDetails providerVersionDetailsInstance = new VersionDetails();
                                    propertiesInstance.ProviderVersionDetails = providerVersionDetailsInstance;
                                    
                                    JToken versionValue = providerVersionDetailsValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        providerVersionDetailsInstance.Version = versionInstance;
                                    }
                                    
                                    JToken expiryDateValue = providerVersionDetailsValue["expiryDate"];
                                    if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                        providerVersionDetailsInstance.ExpiryDate = expiryDateInstance;
                                    }
                                    
                                    JToken statusValue = providerVersionDetailsValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        providerVersionDetailsInstance.Status = statusInstance;
                                    }
                                }
                                
                                JToken lastHeartBeatValue = propertiesValue["lastHeartBeat"];
                                if (lastHeartBeatValue != null && lastHeartBeatValue.Type != JTokenType.Null)
                                {
                                    DateTime lastHeartBeatInstance = ((DateTime)lastHeartBeatValue);
                                    propertiesInstance.LastHeartbeat = lastHeartBeatInstance;
                                }
                                
                                JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                {
                                    string connectionStatusInstance = ((string)connectionStatusValue);
                                    propertiesInstance.ConnectionStatus = connectionStatusInstance;
                                }
                                
                                JToken allowedScenariosArray = propertiesValue["allowedScenarios"];
                                if (allowedScenariosArray != null && allowedScenariosArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedScenariosValue in ((JArray)allowedScenariosArray))
                                    {
                                        propertiesInstance.AllowedScenarios.Add(((string)allowedScenariosValue));
                                    }
                                }
                                
                                JToken protectedItemCountValue = propertiesValue["protectedItemCount"];
                                if (protectedItemCountValue != null && protectedItemCountValue.Type != JTokenType.Null)
                                {
                                    int protectedItemCountInstance = ((int)protectedItemCountValue);
                                    propertiesInstance.ProtectedItemCount = protectedItemCountInstance;
                                }
                                
                                JToken healthErrorDetailsArray = propertiesValue["healthErrorDetails"];
                                if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.HealthErrorDetails.Add(healthErrorInstance);
                                        
                                        JToken errorSourceValue = healthErrorDetailsValue["errorSource"];
                                        if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                        {
                                            string errorSourceInstance = ((string)errorSourceValue);
                                            healthErrorInstance.ErrorSource = errorSourceInstance;
                                        }
                                        
                                        JToken errorTypeValue = healthErrorDetailsValue["errorType"];
                                        if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                        {
                                            string errorTypeInstance = ((string)errorTypeValue);
                                            healthErrorInstance.ErrorType = errorTypeInstance;
                                        }
                                        
                                        JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCategoryValue = healthErrorDetailsValue["errorCategory"];
                                        if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                        {
                                            string errorCategoryInstance = ((string)errorCategoryValue);
                                            healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                        }
                                        
                                        JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken summaryMessageValue = healthErrorDetailsValue["summaryMessage"];
                                        if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                        {
                                            string summaryMessageInstance = ((string)summaryMessageValue);
                                            healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                        
                                        JToken innerHealthErrorsArray = healthErrorDetailsValue["innerHealthErrors"];
                                        if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                            {
                                                InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                
                                                JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance2 = ((string)errorSourceValue2);
                                                    innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                }
                                                
                                                JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance2 = ((string)errorTypeValue2);
                                                    innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                }
                                                
                                                JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance2 = ((string)errorLevelValue2);
                                                    innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                }
                                                
                                                JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                    innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                }
                                                
                                                JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance2 = ((string)errorCodeValue2);
                                                    innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                }
                                                
                                                JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance2 = ((string)errorMessageValue2);
                                                    innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                }
                                                
                                                JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                    innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                }
                                                
                                                JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                    innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                }
                                                
                                                JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                    innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                }
                                                
                                                JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                    innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                    innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                }
                                                
                                                JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance2 = ((string)entityIdValue2);
                                                    innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken authenticationIdentityDetailsValue = propertiesValue["authenticationIdentityDetails"];
                                if (authenticationIdentityDetailsValue != null && authenticationIdentityDetailsValue.Type != JTokenType.Null)
                                {
                                    IdentityProviderDetails authenticationIdentityDetailsInstance = new IdentityProviderDetails();
                                    propertiesInstance.AuthenticationIdentityInput = authenticationIdentityDetailsInstance;
                                    
                                    JToken tenantIdValue = authenticationIdentityDetailsValue["tenantId"];
                                    if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                    {
                                        string tenantIdInstance = ((string)tenantIdValue);
                                        authenticationIdentityDetailsInstance.TenantId = tenantIdInstance;
                                    }
                                    
                                    JToken applicationIdValue = authenticationIdentityDetailsValue["applicationId"];
                                    if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance = ((string)applicationIdValue);
                                        authenticationIdentityDetailsInstance.ApplicationId = applicationIdInstance;
                                    }
                                    
                                    JToken objectIdValue = authenticationIdentityDetailsValue["objectId"];
                                    if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance = ((string)objectIdValue);
                                        authenticationIdentityDetailsInstance.ObjectId = objectIdInstance;
                                    }
                                    
                                    JToken audienceValue = authenticationIdentityDetailsValue["audience"];
                                    if (audienceValue != null && audienceValue.Type != JTokenType.Null)
                                    {
                                        string audienceInstance = ((string)audienceValue);
                                        authenticationIdentityDetailsInstance.Audience = audienceInstance;
                                    }
                                    
                                    JToken aadAuthorityValue = authenticationIdentityDetailsValue["aadAuthority"];
                                    if (aadAuthorityValue != null && aadAuthorityValue.Type != JTokenType.Null)
                                    {
                                        string aadAuthorityInstance = ((string)aadAuthorityValue);
                                        authenticationIdentityDetailsInstance.AadAuthority = aadAuthorityInstance;
                                    }
                                }
                                
                                JToken resourceAccessIdentityDetailsValue = propertiesValue["resourceAccessIdentityDetails"];
                                if (resourceAccessIdentityDetailsValue != null && resourceAccessIdentityDetailsValue.Type != JTokenType.Null)
                                {
                                    IdentityProviderDetails resourceAccessIdentityDetailsInstance = new IdentityProviderDetails();
                                    propertiesInstance.ResourceAccessIdentityInput = resourceAccessIdentityDetailsInstance;
                                    
                                    JToken tenantIdValue2 = resourceAccessIdentityDetailsValue["tenantId"];
                                    if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                    {
                                        string tenantIdInstance2 = ((string)tenantIdValue2);
                                        resourceAccessIdentityDetailsInstance.TenantId = tenantIdInstance2;
                                    }
                                    
                                    JToken applicationIdValue2 = resourceAccessIdentityDetailsValue["applicationId"];
                                    if (applicationIdValue2 != null && applicationIdValue2.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance2 = ((string)applicationIdValue2);
                                        resourceAccessIdentityDetailsInstance.ApplicationId = applicationIdInstance2;
                                    }
                                    
                                    JToken objectIdValue2 = resourceAccessIdentityDetailsValue["objectId"];
                                    if (objectIdValue2 != null && objectIdValue2.Type != JTokenType.Null)
                                    {
                                        string objectIdInstance2 = ((string)objectIdValue2);
                                        resourceAccessIdentityDetailsInstance.ObjectId = objectIdInstance2;
                                    }
                                    
                                    JToken audienceValue2 = resourceAccessIdentityDetailsValue["audience"];
                                    if (audienceValue2 != null && audienceValue2.Type != JTokenType.Null)
                                    {
                                        string audienceInstance2 = ((string)audienceValue2);
                                        resourceAccessIdentityDetailsInstance.Audience = audienceInstance2;
                                    }
                                    
                                    JToken aadAuthorityValue2 = resourceAccessIdentityDetailsValue["aadAuthority"];
                                    if (aadAuthorityValue2 != null && aadAuthorityValue2.Type != JTokenType.Null)
                                    {
                                        string aadAuthorityInstance2 = ((string)aadAuthorityValue2);
                                        resourceAccessIdentityDetailsInstance.AadAuthority = aadAuthorityInstance2;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                recoveryServicesProviderInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recoveryServicesProviderInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recoveryServicesProviderInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recoveryServicesProviderInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recoveryServicesProviderInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue2 = responseDoc["Status"];
                            if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance2 = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue2), true));
                                result.Status = statusInstance2;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetDeleteStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetPurgeStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPurgeStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetRefreshStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetRefreshStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                            
                            JToken cultureValue = responseDoc["Culture"];
                            if (cultureValue != null && cultureValue.Type != JTokenType.Null)
                            {
                                string cultureInstance = ((string)cultureValue);
                                result.Culture = cultureInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all servers under the vault for given fabric.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list servers operation.
        /// </returns>
        public async Task<RecoveryServicesProviderListResponse> ListAsync(string fabricName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationRecoveryServicesProviders";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryServicesProviderListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryServicesProviderListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecoveryServicesProvider recoveryServicesProviderInstance = new RecoveryServicesProvider();
                                    result.RecoveryServicesProviders.Add(recoveryServicesProviderInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecoveryServicesProviderProperties propertiesInstance = new RecoveryServicesProviderProperties();
                                        recoveryServicesProviderInstance.Properties = propertiesInstance;
                                        
                                        JToken fabricTypeValue = propertiesValue["fabricType"];
                                        if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                        {
                                            string fabricTypeInstance = ((string)fabricTypeValue);
                                            propertiesInstance.FabricType = fabricTypeInstance;
                                        }
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                        if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                            propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                        }
                                        
                                        JToken providerVersionValue = propertiesValue["providerVersion"];
                                        if (providerVersionValue != null && providerVersionValue.Type != JTokenType.Null)
                                        {
                                            string providerVersionInstance = ((string)providerVersionValue);
                                            propertiesInstance.ProviderVersion = providerVersionInstance;
                                        }
                                        
                                        JToken serverVersionValue = propertiesValue["serverVersion"];
                                        if (serverVersionValue != null && serverVersionValue.Type != JTokenType.Null)
                                        {
                                            string serverVersionInstance = ((string)serverVersionValue);
                                            propertiesInstance.ServerVersion = serverVersionInstance;
                                        }
                                        
                                        JToken providerVersionStateValue = propertiesValue["providerVersionState"];
                                        if (providerVersionStateValue != null && providerVersionStateValue.Type != JTokenType.Null)
                                        {
                                            string providerVersionStateInstance = ((string)providerVersionStateValue);
                                            propertiesInstance.ProviderVersionState = providerVersionStateInstance;
                                        }
                                        
                                        JToken providerVersionExpiryDateValue = propertiesValue["providerVersionExpiryDate"];
                                        if (providerVersionExpiryDateValue != null && providerVersionExpiryDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime providerVersionExpiryDateInstance = ((DateTime)providerVersionExpiryDateValue);
                                            propertiesInstance.ProviderVersionExpiryDate = providerVersionExpiryDateInstance;
                                        }
                                        
                                        JToken providerVersionDetailsValue = propertiesValue["providerVersionDetails"];
                                        if (providerVersionDetailsValue != null && providerVersionDetailsValue.Type != JTokenType.Null)
                                        {
                                            VersionDetails providerVersionDetailsInstance = new VersionDetails();
                                            propertiesInstance.ProviderVersionDetails = providerVersionDetailsInstance;
                                            
                                            JToken versionValue = providerVersionDetailsValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                providerVersionDetailsInstance.Version = versionInstance;
                                            }
                                            
                                            JToken expiryDateValue = providerVersionDetailsValue["expiryDate"];
                                            if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                providerVersionDetailsInstance.ExpiryDate = expiryDateInstance;
                                            }
                                            
                                            JToken statusValue = providerVersionDetailsValue["status"];
                                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                                            {
                                                string statusInstance = ((string)statusValue);
                                                providerVersionDetailsInstance.Status = statusInstance;
                                            }
                                        }
                                        
                                        JToken lastHeartBeatValue = propertiesValue["lastHeartBeat"];
                                        if (lastHeartBeatValue != null && lastHeartBeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartBeatInstance = ((DateTime)lastHeartBeatValue);
                                            propertiesInstance.LastHeartbeat = lastHeartBeatInstance;
                                        }
                                        
                                        JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                        if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string connectionStatusInstance = ((string)connectionStatusValue);
                                            propertiesInstance.ConnectionStatus = connectionStatusInstance;
                                        }
                                        
                                        JToken allowedScenariosArray = propertiesValue["allowedScenarios"];
                                        if (allowedScenariosArray != null && allowedScenariosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedScenariosValue in ((JArray)allowedScenariosArray))
                                            {
                                                propertiesInstance.AllowedScenarios.Add(((string)allowedScenariosValue));
                                            }
                                        }
                                        
                                        JToken protectedItemCountValue = propertiesValue["protectedItemCount"];
                                        if (protectedItemCountValue != null && protectedItemCountValue.Type != JTokenType.Null)
                                        {
                                            int protectedItemCountInstance = ((int)protectedItemCountValue);
                                            propertiesInstance.ProtectedItemCount = protectedItemCountInstance;
                                        }
                                        
                                        JToken healthErrorDetailsArray = propertiesValue["healthErrorDetails"];
                                        if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrorDetails.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorDetailsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorDetailsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorDetailsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorDetailsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorDetailsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken authenticationIdentityDetailsValue = propertiesValue["authenticationIdentityDetails"];
                                        if (authenticationIdentityDetailsValue != null && authenticationIdentityDetailsValue.Type != JTokenType.Null)
                                        {
                                            IdentityProviderDetails authenticationIdentityDetailsInstance = new IdentityProviderDetails();
                                            propertiesInstance.AuthenticationIdentityInput = authenticationIdentityDetailsInstance;
                                            
                                            JToken tenantIdValue = authenticationIdentityDetailsValue["tenantId"];
                                            if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                            {
                                                string tenantIdInstance = ((string)tenantIdValue);
                                                authenticationIdentityDetailsInstance.TenantId = tenantIdInstance;
                                            }
                                            
                                            JToken applicationIdValue = authenticationIdentityDetailsValue["applicationId"];
                                            if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                            {
                                                string applicationIdInstance = ((string)applicationIdValue);
                                                authenticationIdentityDetailsInstance.ApplicationId = applicationIdInstance;
                                            }
                                            
                                            JToken objectIdValue = authenticationIdentityDetailsValue["objectId"];
                                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                            {
                                                string objectIdInstance = ((string)objectIdValue);
                                                authenticationIdentityDetailsInstance.ObjectId = objectIdInstance;
                                            }
                                            
                                            JToken audienceValue = authenticationIdentityDetailsValue["audience"];
                                            if (audienceValue != null && audienceValue.Type != JTokenType.Null)
                                            {
                                                string audienceInstance = ((string)audienceValue);
                                                authenticationIdentityDetailsInstance.Audience = audienceInstance;
                                            }
                                            
                                            JToken aadAuthorityValue = authenticationIdentityDetailsValue["aadAuthority"];
                                            if (aadAuthorityValue != null && aadAuthorityValue.Type != JTokenType.Null)
                                            {
                                                string aadAuthorityInstance = ((string)aadAuthorityValue);
                                                authenticationIdentityDetailsInstance.AadAuthority = aadAuthorityInstance;
                                            }
                                        }
                                        
                                        JToken resourceAccessIdentityDetailsValue = propertiesValue["resourceAccessIdentityDetails"];
                                        if (resourceAccessIdentityDetailsValue != null && resourceAccessIdentityDetailsValue.Type != JTokenType.Null)
                                        {
                                            IdentityProviderDetails resourceAccessIdentityDetailsInstance = new IdentityProviderDetails();
                                            propertiesInstance.ResourceAccessIdentityInput = resourceAccessIdentityDetailsInstance;
                                            
                                            JToken tenantIdValue2 = resourceAccessIdentityDetailsValue["tenantId"];
                                            if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                            {
                                                string tenantIdInstance2 = ((string)tenantIdValue2);
                                                resourceAccessIdentityDetailsInstance.TenantId = tenantIdInstance2;
                                            }
                                            
                                            JToken applicationIdValue2 = resourceAccessIdentityDetailsValue["applicationId"];
                                            if (applicationIdValue2 != null && applicationIdValue2.Type != JTokenType.Null)
                                            {
                                                string applicationIdInstance2 = ((string)applicationIdValue2);
                                                resourceAccessIdentityDetailsInstance.ApplicationId = applicationIdInstance2;
                                            }
                                            
                                            JToken objectIdValue2 = resourceAccessIdentityDetailsValue["objectId"];
                                            if (objectIdValue2 != null && objectIdValue2.Type != JTokenType.Null)
                                            {
                                                string objectIdInstance2 = ((string)objectIdValue2);
                                                resourceAccessIdentityDetailsInstance.ObjectId = objectIdInstance2;
                                            }
                                            
                                            JToken audienceValue2 = resourceAccessIdentityDetailsValue["audience"];
                                            if (audienceValue2 != null && audienceValue2.Type != JTokenType.Null)
                                            {
                                                string audienceInstance2 = ((string)audienceValue2);
                                                resourceAccessIdentityDetailsInstance.Audience = audienceInstance2;
                                            }
                                            
                                            JToken aadAuthorityValue2 = resourceAccessIdentityDetailsValue["aadAuthority"];
                                            if (aadAuthorityValue2 != null && aadAuthorityValue2.Type != JTokenType.Null)
                                            {
                                                string aadAuthorityInstance2 = ((string)aadAuthorityValue2);
                                                resourceAccessIdentityDetailsInstance.AadAuthority = aadAuthorityInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        recoveryServicesProviderInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        recoveryServicesProviderInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        recoveryServicesProviderInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        recoveryServicesProviderInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            recoveryServicesProviderInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all servers under the vault.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list servers operation.
        /// </returns>
        public async Task<RecoveryServicesProviderListResponse> ListAllAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationRecoveryServicesProviders";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2018-01-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryServicesProviderListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryServicesProviderListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecoveryServicesProvider recoveryServicesProviderInstance = new RecoveryServicesProvider();
                                    result.RecoveryServicesProviders.Add(recoveryServicesProviderInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecoveryServicesProviderProperties propertiesInstance = new RecoveryServicesProviderProperties();
                                        recoveryServicesProviderInstance.Properties = propertiesInstance;
                                        
                                        JToken fabricTypeValue = propertiesValue["fabricType"];
                                        if (fabricTypeValue != null && fabricTypeValue.Type != JTokenType.Null)
                                        {
                                            string fabricTypeInstance = ((string)fabricTypeValue);
                                            propertiesInstance.FabricType = fabricTypeInstance;
                                        }
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken fabricFriendlyNameValue = propertiesValue["fabricFriendlyName"];
                                        if (fabricFriendlyNameValue != null && fabricFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string fabricFriendlyNameInstance = ((string)fabricFriendlyNameValue);
                                            propertiesInstance.FabricFriendlyName = fabricFriendlyNameInstance;
                                        }
                                        
                                        JToken providerVersionValue = propertiesValue["providerVersion"];
                                        if (providerVersionValue != null && providerVersionValue.Type != JTokenType.Null)
                                        {
                                            string providerVersionInstance = ((string)providerVersionValue);
                                            propertiesInstance.ProviderVersion = providerVersionInstance;
                                        }
                                        
                                        JToken serverVersionValue = propertiesValue["serverVersion"];
                                        if (serverVersionValue != null && serverVersionValue.Type != JTokenType.Null)
                                        {
                                            string serverVersionInstance = ((string)serverVersionValue);
                                            propertiesInstance.ServerVersion = serverVersionInstance;
                                        }
                                        
                                        JToken providerVersionStateValue = propertiesValue["providerVersionState"];
                                        if (providerVersionStateValue != null && providerVersionStateValue.Type != JTokenType.Null)
                                        {
                                            string providerVersionStateInstance = ((string)providerVersionStateValue);
                                            propertiesInstance.ProviderVersionState = providerVersionStateInstance;
                                        }
                                        
                                        JToken providerVersionExpiryDateValue = propertiesValue["providerVersionExpiryDate"];
                                        if (providerVersionExpiryDateValue != null && providerVersionExpiryDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime providerVersionExpiryDateInstance = ((DateTime)providerVersionExpiryDateValue);
                                            propertiesInstance.ProviderVersionExpiryDate = providerVersionExpiryDateInstance;
                                        }
                                        
                                        JToken providerVersionDetailsValue = propertiesValue["providerVersionDetails"];
                                        if (providerVersionDetailsValue != null && providerVersionDetailsValue.Type != JTokenType.Null)
                                        {
                                            VersionDetails providerVersionDetailsInstance = new VersionDetails();
                                            propertiesInstance.ProviderVersionDetails = providerVersionDetailsInstance;
                                            
                                            JToken versionValue = providerVersionDetailsValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                providerVersionDetailsInstance.Version = versionInstance;
                                            }
                                            
                                            JToken expiryDateValue = providerVersionDetailsValue["expiryDate"];
                                            if (expiryDateValue != null && expiryDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime expiryDateInstance = ((DateTime)expiryDateValue);
                                                providerVersionDetailsInstance.ExpiryDate = expiryDateInstance;
                                            }
                                            
                                            JToken statusValue = providerVersionDetailsValue["status"];
                                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                                            {
                                                string statusInstance = ((string)statusValue);
                                                providerVersionDetailsInstance.Status = statusInstance;
                                            }
                                        }
                                        
                                        JToken lastHeartBeatValue = propertiesValue["lastHeartBeat"];
                                        if (lastHeartBeatValue != null && lastHeartBeatValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastHeartBeatInstance = ((DateTime)lastHeartBeatValue);
                                            propertiesInstance.LastHeartbeat = lastHeartBeatInstance;
                                        }
                                        
                                        JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                        if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string connectionStatusInstance = ((string)connectionStatusValue);
                                            propertiesInstance.ConnectionStatus = connectionStatusInstance;
                                        }
                                        
                                        JToken allowedScenariosArray = propertiesValue["allowedScenarios"];
                                        if (allowedScenariosArray != null && allowedScenariosArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedScenariosValue in ((JArray)allowedScenariosArray))
                                            {
                                                propertiesInstance.AllowedScenarios.Add(((string)allowedScenariosValue));
                                            }
                                        }
                                        
                                        JToken protectedItemCountValue = propertiesValue["protectedItemCount"];
                                        if (protectedItemCountValue != null && protectedItemCountValue.Type != JTokenType.Null)
                                        {
                                            int protectedItemCountInstance = ((int)protectedItemCountValue);
                                            propertiesInstance.ProtectedItemCount = protectedItemCountInstance;
                                        }
                                        
                                        JToken healthErrorDetailsArray = propertiesValue["healthErrorDetails"];
                                        if (healthErrorDetailsArray != null && healthErrorDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken healthErrorDetailsValue in ((JArray)healthErrorDetailsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.HealthErrorDetails.Add(healthErrorInstance);
                                                
                                                JToken errorSourceValue = healthErrorDetailsValue["errorSource"];
                                                if (errorSourceValue != null && errorSourceValue.Type != JTokenType.Null)
                                                {
                                                    string errorSourceInstance = ((string)errorSourceValue);
                                                    healthErrorInstance.ErrorSource = errorSourceInstance;
                                                }
                                                
                                                JToken errorTypeValue = healthErrorDetailsValue["errorType"];
                                                if (errorTypeValue != null && errorTypeValue.Type != JTokenType.Null)
                                                {
                                                    string errorTypeInstance = ((string)errorTypeValue);
                                                    healthErrorInstance.ErrorType = errorTypeInstance;
                                                }
                                                
                                                JToken errorLevelValue = healthErrorDetailsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCategoryValue = healthErrorDetailsValue["errorCategory"];
                                                if (errorCategoryValue != null && errorCategoryValue.Type != JTokenType.Null)
                                                {
                                                    string errorCategoryInstance = ((string)errorCategoryValue);
                                                    healthErrorInstance.ErrorCategory = errorCategoryInstance;
                                                }
                                                
                                                JToken errorCodeValue = healthErrorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = healthErrorDetailsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken summaryMessageValue = healthErrorDetailsValue["summaryMessage"];
                                                if (summaryMessageValue != null && summaryMessageValue.Type != JTokenType.Null)
                                                {
                                                    string summaryMessageInstance = ((string)summaryMessageValue);
                                                    healthErrorInstance.SummaryMessage = summaryMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = healthErrorDetailsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = healthErrorDetailsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = healthErrorDetailsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    DateTime creationTimeUtcInstance = ((DateTime)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = healthErrorDetailsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = healthErrorDetailsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                                
                                                JToken innerHealthErrorsArray = healthErrorDetailsValue["innerHealthErrors"];
                                                if (innerHealthErrorsArray != null && innerHealthErrorsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken innerHealthErrorsValue in ((JArray)innerHealthErrorsArray))
                                                    {
                                                        InnerHealthError innerHealthErrorInstance = new InnerHealthError();
                                                        healthErrorInstance.InnerHealthErrors.Add(innerHealthErrorInstance);
                                                        
                                                        JToken errorSourceValue2 = innerHealthErrorsValue["errorSource"];
                                                        if (errorSourceValue2 != null && errorSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorSourceInstance2 = ((string)errorSourceValue2);
                                                            innerHealthErrorInstance.ErrorSource = errorSourceInstance2;
                                                        }
                                                        
                                                        JToken errorTypeValue2 = innerHealthErrorsValue["errorType"];
                                                        if (errorTypeValue2 != null && errorTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorTypeInstance2 = ((string)errorTypeValue2);
                                                            innerHealthErrorInstance.ErrorType = errorTypeInstance2;
                                                        }
                                                        
                                                        JToken errorLevelValue2 = innerHealthErrorsValue["errorLevel"];
                                                        if (errorLevelValue2 != null && errorLevelValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorLevelInstance2 = ((string)errorLevelValue2);
                                                            innerHealthErrorInstance.ErrorLevel = errorLevelInstance2;
                                                        }
                                                        
                                                        JToken errorCategoryValue2 = innerHealthErrorsValue["errorCategory"];
                                                        if (errorCategoryValue2 != null && errorCategoryValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCategoryInstance2 = ((string)errorCategoryValue2);
                                                            innerHealthErrorInstance.ErrorCategory = errorCategoryInstance2;
                                                        }
                                                        
                                                        JToken errorCodeValue2 = innerHealthErrorsValue["errorCode"];
                                                        if (errorCodeValue2 != null && errorCodeValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance2 = ((string)errorCodeValue2);
                                                            innerHealthErrorInstance.ErrorCode = errorCodeInstance2;
                                                        }
                                                        
                                                        JToken errorMessageValue2 = innerHealthErrorsValue["errorMessage"];
                                                        if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string errorMessageInstance2 = ((string)errorMessageValue2);
                                                            innerHealthErrorInstance.ErrorMessage = errorMessageInstance2;
                                                        }
                                                        
                                                        JToken summaryMessageValue2 = innerHealthErrorsValue["summaryMessage"];
                                                        if (summaryMessageValue2 != null && summaryMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string summaryMessageInstance2 = ((string)summaryMessageValue2);
                                                            innerHealthErrorInstance.SummaryMessage = summaryMessageInstance2;
                                                        }
                                                        
                                                        JToken possibleCausesValue2 = innerHealthErrorsValue["possibleCauses"];
                                                        if (possibleCausesValue2 != null && possibleCausesValue2.Type != JTokenType.Null)
                                                        {
                                                            string possibleCausesInstance2 = ((string)possibleCausesValue2);
                                                            innerHealthErrorInstance.PossibleCauses = possibleCausesInstance2;
                                                        }
                                                        
                                                        JToken recommendedActionValue2 = innerHealthErrorsValue["recommendedAction"];
                                                        if (recommendedActionValue2 != null && recommendedActionValue2.Type != JTokenType.Null)
                                                        {
                                                            string recommendedActionInstance2 = ((string)recommendedActionValue2);
                                                            innerHealthErrorInstance.RecommendedAction = recommendedActionInstance2;
                                                        }
                                                        
                                                        JToken creationTimeUtcValue2 = innerHealthErrorsValue["creationTimeUtc"];
                                                        if (creationTimeUtcValue2 != null && creationTimeUtcValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime creationTimeUtcInstance2 = ((DateTime)creationTimeUtcValue2);
                                                            innerHealthErrorInstance.CreationTimeUtc = creationTimeUtcInstance2;
                                                        }
                                                        
                                                        JToken recoveryProviderErrorMessageValue2 = innerHealthErrorsValue["recoveryProviderErrorMessage"];
                                                        if (recoveryProviderErrorMessageValue2 != null && recoveryProviderErrorMessageValue2.Type != JTokenType.Null)
                                                        {
                                                            string recoveryProviderErrorMessageInstance2 = ((string)recoveryProviderErrorMessageValue2);
                                                            innerHealthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance2;
                                                        }
                                                        
                                                        JToken entityIdValue2 = innerHealthErrorsValue["entityId"];
                                                        if (entityIdValue2 != null && entityIdValue2.Type != JTokenType.Null)
                                                        {
                                                            string entityIdInstance2 = ((string)entityIdValue2);
                                                            innerHealthErrorInstance.EntityId = entityIdInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken authenticationIdentityDetailsValue = propertiesValue["authenticationIdentityDetails"];
                                        if (authenticationIdentityDetailsValue != null && authenticationIdentityDetailsValue.Type != JTokenType.Null)
                                        {
                                            IdentityProviderDetails authenticationIdentityDetailsInstance = new IdentityProviderDetails();
                                            propertiesInstance.AuthenticationIdentityInput = authenticationIdentityDetailsInstance;
                                            
                                            JToken tenantIdValue = authenticationIdentityDetailsValue["tenantId"];
                                            if (tenantIdValue != null && tenantIdValue.Type != JTokenType.Null)
                                            {
                                                string tenantIdInstance = ((string)tenantIdValue);
                                                authenticationIdentityDetailsInstance.TenantId = tenantIdInstance;
                                            }
                                            
                                            JToken applicationIdValue = authenticationIdentityDetailsValue["applicationId"];
                                            if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                            {
                                                string applicationIdInstance = ((string)applicationIdValue);
                                                authenticationIdentityDetailsInstance.ApplicationId = applicationIdInstance;
                                            }
                                            
                                            JToken objectIdValue = authenticationIdentityDetailsValue["objectId"];
                                            if (objectIdValue != null && objectIdValue.Type != JTokenType.Null)
                                            {
                                                string objectIdInstance = ((string)objectIdValue);
                                                authenticationIdentityDetailsInstance.ObjectId = objectIdInstance;
                                            }
                                            
                                            JToken audienceValue = authenticationIdentityDetailsValue["audience"];
                                            if (audienceValue != null && audienceValue.Type != JTokenType.Null)
                                            {
                                                string audienceInstance = ((string)audienceValue);
                                                authenticationIdentityDetailsInstance.Audience = audienceInstance;
                                            }
                                            
                                            JToken aadAuthorityValue = authenticationIdentityDetailsValue["aadAuthority"];
                                            if (aadAuthorityValue != null && aadAuthorityValue.Type != JTokenType.Null)
                                            {
                                                string aadAuthorityInstance = ((string)aadAuthorityValue);
                                                authenticationIdentityDetailsInstance.AadAuthority = aadAuthorityInstance;
                                            }
                                        }
                                        
                                        JToken resourceAccessIdentityDetailsValue = propertiesValue["resourceAccessIdentityDetails"];
                                        if (resourceAccessIdentityDetailsValue != null && resourceAccessIdentityDetailsValue.Type != JTokenType.Null)
                                        {
                                            IdentityProviderDetails resourceAccessIdentityDetailsInstance = new IdentityProviderDetails();
                                            propertiesInstance.ResourceAccessIdentityInput = resourceAccessIdentityDetailsInstance;
                                            
                                            JToken tenantIdValue2 = resourceAccessIdentityDetailsValue["tenantId"];
                                            if (tenantIdValue2 != null && tenantIdValue2.Type != JTokenType.Null)
                                            {
                                                string tenantIdInstance2 = ((string)tenantIdValue2);
                                                resourceAccessIdentityDetailsInstance.TenantId = tenantIdInstance2;
                                            }
                                            
                                            JToken applicationIdValue2 = resourceAccessIdentityDetailsValue["applicationId"];
                                            if (applicationIdValue2 != null && applicationIdValue2.Type != JTokenType.Null)
                                            {
                                                string applicationIdInstance2 = ((string)applicationIdValue2);
                                                resourceAccessIdentityDetailsInstance.ApplicationId = applicationIdInstance2;
                                            }
                                            
                                            JToken objectIdValue2 = resourceAccessIdentityDetailsValue["objectId"];
                                            if (objectIdValue2 != null && objectIdValue2.Type != JTokenType.Null)
                                            {
                                                string objectIdInstance2 = ((string)objectIdValue2);
                                                resourceAccessIdentityDetailsInstance.ObjectId = objectIdInstance2;
                                            }
                                            
                                            JToken audienceValue2 = resourceAccessIdentityDetailsValue["audience"];
                                            if (audienceValue2 != null && audienceValue2.Type != JTokenType.Null)
                                            {
                                                string audienceInstance2 = ((string)audienceValue2);
                                                resourceAccessIdentityDetailsInstance.Audience = audienceInstance2;
                                            }
                                            
                                            JToken aadAuthorityValue2 = resourceAccessIdentityDetailsValue["aadAuthority"];
                                            if (aadAuthorityValue2 != null && aadAuthorityValue2.Type != JTokenType.Null)
                                            {
                                                string aadAuthorityInstance2 = ((string)aadAuthorityValue2);
                                                resourceAccessIdentityDetailsInstance.AadAuthority = aadAuthorityInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        recoveryServicesProviderInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        recoveryServicesProviderInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        recoveryServicesProviderInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        recoveryServicesProviderInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            recoveryServicesProviderInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken clientRequestIdValue = responseDoc["ClientRequestId"];
                            if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                            {
                                string clientRequestIdInstance = ((string)clientRequestIdValue);
                                result.ClientRequestId = clientRequestIdInstance;
                            }
                            
                            JToken correlationRequestIdValue = responseDoc["CorrelationRequestId"];
                            if (correlationRequestIdValue != null && correlationRequestIdValue.Type != JTokenType.Null)
                            {
                                string correlationRequestIdInstance = ((string)correlationRequestIdValue);
                                result.CorrelationRequestId = correlationRequestIdInstance;
                            }
                            
                            JToken dateValue = responseDoc["Date"];
                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                            {
                                string dateInstance = ((string)dateValue);
                                result.Date = dateInstance;
                            }
                            
                            JToken contentTypeValue = responseDoc["ContentType"];
                            if (contentTypeValue != null && contentTypeValue.Type != JTokenType.Null)
                            {
                                string contentTypeInstance = ((string)contentTypeValue);
                                result.ContentType = contentTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Content != null && httpResponse.Content.Headers.Contains("Content-Type"))
                    {
                        result.ContentType = httpResponse.Content.Headers.GetValues("Content-Type").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = httpResponse.Headers.GetValues("Date").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-client-request-id"))
                    {
                        result.ClientRequestId = httpResponse.Headers.GetValues("x-ms-client-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-correlation-request-id"))
                    {
                        result.CorrelationRequestId = httpResponse.Headers.GetValues("x-ms-correlation-request-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Purges a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Provider Name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PurgeAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PurgeAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryServicesProvider.BeginPurgingAsync(fabricName, providerName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.RecoveryServicesProvider.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryServicesProvider.GetPurgeStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Refreshes a provider
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Name of provider's fabric
        /// </param>
        /// <param name='providerName'>
        /// Required. Name of provider
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> RefreshAsync(string fabricName, string providerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("providerName", providerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "RefreshAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.RecoveryServicesProvider.BeginRefreshingAsync(fabricName, providerName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.RecoveryServicesProvider.GetRefreshStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.RecoveryServicesProvider.GetRefreshStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
