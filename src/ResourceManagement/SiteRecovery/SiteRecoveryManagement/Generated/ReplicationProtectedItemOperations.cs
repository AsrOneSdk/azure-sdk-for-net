// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of Replication protected item operations for the Site
    /// Recovery extension.
    /// </summary>
    internal partial class ReplicationProtectedItemOperations : IServiceOperations<SiteRecoveryManagementClient>, IReplicationProtectedItemOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ReplicationProtectedItemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ReplicationProtectedItemOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Execute commit failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginCommitFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCommitFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/failoverCommit";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDisableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDisableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject disableProtectionInputValue = new JObject();
                requestDoc = disableProtectionInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    disableProtectionInputValue["properties"] = propertiesValue;
                    
                    JObject replicationProviderInputValue = new JObject();
                    propertiesValue["replicationProviderInput"] = replicationProviderInputValue;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginEnableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginEnableProtectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject enableProtectionInputValue = new JObject();
                requestDoc = enableProtectionInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    enableProtectionInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.PolicyId != null)
                    {
                        propertiesValue["policyId"] = input.Properties.PolicyId;
                    }
                    
                    if (input.Properties.ProtectableItemId != null)
                    {
                        propertiesValue["protectableItemId"] = input.Properties.ProtectableItemId;
                    }
                    
                    if (input.Properties.ProviderConfigurationSettings != null)
                    {
                        JObject providerConfigurationSettingsValue = new JObject();
                        propertiesValue["providerConfigurationSettings"] = providerConfigurationSettingsValue;
                        if (input.Properties.ProviderConfigurationSettings is AzureEnableProtectionInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "AzureEnableProtectionInput";
                            AzureEnableProtectionInput derived = ((AzureEnableProtectionInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived.HvHostVmId != null)
                            {
                                providerConfigurationSettingsValue["hvHostVmId"] = derived.HvHostVmId;
                            }
                            
                            if (derived.VmName != null)
                            {
                                providerConfigurationSettingsValue["vmName"] = derived.VmName;
                            }
                            
                            if (derived.OSType != null)
                            {
                                providerConfigurationSettingsValue["osType"] = derived.OSType;
                            }
                            
                            if (derived.VHDId != null)
                            {
                                providerConfigurationSettingsValue["vHDId"] = derived.VHDId;
                            }
                            
                            if (derived.StorageAccountName != null)
                            {
                                providerConfigurationSettingsValue["storageAccountName"] = derived.StorageAccountName;
                            }
                            
                            if (derived.StorageAccountSubscriptionId != null)
                            {
                                providerConfigurationSettingsValue["storageAccountSubscriptionId"] = derived.StorageAccountSubscriptionId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute planned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginPlannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, PlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginPlannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/plannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject plannedFailoverInputValue = new JObject();
                requestDoc = plannedFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    plannedFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.ProviderConfigurationSettings != null)
                    {
                        JObject providerConfigurationSettingsValue = new JObject();
                        propertiesValue["providerConfigurationSettings"] = providerConfigurationSettingsValue;
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailoverProviderInput";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerConfigurationSettingsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailbackProviderInput";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerConfigurationSettingsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerConfigurationSettingsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerConfigurationSettingsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute reprotect for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Reprotect input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginReprotectAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ReverseReplicationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginReprotectAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/reProtect";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject reverseReplicationInputValue = new JObject();
                requestDoc = reverseReplicationInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    reverseReplicationInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.ProviderConfigurationSettings != null)
                    {
                        JObject providerConfigurationSettingsValue = new JObject();
                        propertiesValue["providerConfigurationSettings"] = providerConfigurationSettingsValue;
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureReprotectInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureReprotectInput";
                            HyperVReplicaAzureReprotectInput derived = ((HyperVReplicaAzureReprotectInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived.HvHostVmId != null)
                            {
                                providerConfigurationSettingsValue["hvHostVmId"] = derived.HvHostVmId;
                            }
                            
                            if (derived.VmName != null)
                            {
                                providerConfigurationSettingsValue["vmName"] = derived.VmName;
                            }
                            
                            if (derived.OSType != null)
                            {
                                providerConfigurationSettingsValue["osType"] = derived.OSType;
                            }
                            
                            if (derived.VHDId != null)
                            {
                                providerConfigurationSettingsValue["vHDId"] = derived.VHDId;
                            }
                            
                            if (derived.StorageAccountName != null)
                            {
                                providerConfigurationSettingsValue["storageAccountName"] = derived.StorageAccountName;
                            }
                            
                            if (derived.StorageAccountSubscriptionId != null)
                            {
                                providerConfigurationSettingsValue["storageAccountSubscriptionId"] = derived.StorageAccountSubscriptionId;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute Test failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, TestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginTestFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/testFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject testFailoverInputValue = new JObject();
                requestDoc = testFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    testFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.NetworkType != null)
                    {
                        propertiesValue["networkType"] = input.Properties.NetworkType;
                    }
                    
                    if (input.Properties.NetworkId != null)
                    {
                        propertiesValue["networkId"] = input.Properties.NetworkId;
                    }
                    
                    if (input.Properties.ProviderConfigurationSettings != null)
                    {
                        JObject providerConfigurationSettingsValue = new JObject();
                        propertiesValue["providerConfigurationSettings"] = providerConfigurationSettingsValue;
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailoverProviderInput";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerConfigurationSettingsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailbackProviderInput";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerConfigurationSettingsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerConfigurationSettingsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerConfigurationSettingsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute unplanned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginUnplannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUnplannedFailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/ReplicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            url = url + "/unplannedFailover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject unplannedFailoverInputValue = new JObject();
                requestDoc = unplannedFailoverInputValue;
                
                if (input.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    unplannedFailoverInputValue["properties"] = propertiesValue;
                    
                    if (input.Properties.FailoverDirection != null)
                    {
                        propertiesValue["failoverDirection"] = input.Properties.FailoverDirection;
                    }
                    
                    if (input.Properties.SourceSiteOperations != null)
                    {
                        propertiesValue["sourceSiteOperations"] = input.Properties.SourceSiteOperations;
                    }
                    
                    if (input.Properties.ProviderConfigurationSettings != null)
                    {
                        JObject providerConfigurationSettingsValue = new JObject();
                        propertiesValue["providerConfigurationSettings"] = providerConfigurationSettingsValue;
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailoverProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailoverProviderInput";
                            HyperVReplicaAzureFailoverProviderInput derived = ((HyperVReplicaAzureFailoverProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived.VaultLocation != null)
                            {
                                providerConfigurationSettingsValue["vaultLocation"] = derived.VaultLocation;
                            }
                            
                            if (derived.PrimaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["primaryKekCertificatePfx"] = derived.PrimaryKekCertificatePfx;
                            }
                            
                            if (derived.SecondaryKekCertificatePfx != null)
                            {
                                providerConfigurationSettingsValue["secondaryKekCertificatePfx"] = derived.SecondaryKekCertificatePfx;
                            }
                        }
                        if (input.Properties.ProviderConfigurationSettings is HyperVReplicaAzureFailbackProviderInput)
                        {
                            providerConfigurationSettingsValue["__type"] = "HyperVReplicaAzureFailbackProviderInput";
                            HyperVReplicaAzureFailbackProviderInput derived2 = ((HyperVReplicaAzureFailbackProviderInput)input.Properties.ProviderConfigurationSettings);
                            
                            if (derived2.DataSyncOption != null)
                            {
                                providerConfigurationSettingsValue["dataSyncOption"] = derived2.DataSyncOption;
                            }
                            
                            if (derived2.RecoveryVmCreationOption != null)
                            {
                                providerConfigurationSettingsValue["recoveryVmCreationOption"] = derived2.RecoveryVmCreationOption;
                            }
                            
                            if (derived2.ProviderIdForAlternateRecovery != null)
                            {
                                providerConfigurationSettingsValue["providerIdForAlternateRecovery"] = derived2.ProviderIdForAlternateRecovery;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute commit failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> CommitFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CommitFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginCommitFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetCommitFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DisableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DisableProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginDisableProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.ReplicationProtectedItem.GetDisableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetDisableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> EnableProtectionAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "EnableProtectionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginEnableProtectionAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetEnableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetEnableStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public async Task<ReplicationProtectedItemResponse> GetAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            if (replicationProtectedItemName == null)
            {
                throw new ArgumentNullException("replicationProtectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectedItems/";
            url = url + Uri.EscapeDataString(replicationProtectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetCommitFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCommitFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> GetDisableStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDisableStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new LongRunningOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["Location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetEnableStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetEnableStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetPlannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetPlannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetReprotectStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetReprotectStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetTestFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetTestFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Service response for replication protected items operation.
        /// </returns>
        public async Task<ReplicationProtectedItemOperationResponse> GetUnplannedFailoverStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUnplannedFailoverStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/Json");
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                            result.ReplicationProtectedItem = replicationProtectedItemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                replicationProtectedItemInstance.Properties = propertiesInstance;
                                
                                JToken friendlyNameValue = propertiesValue["friendlyName"];
                                if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                {
                                    string friendlyNameInstance = ((string)friendlyNameValue);
                                    propertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                {
                                    string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                    propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                }
                                
                                JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                {
                                    string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                    propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                }
                                
                                JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                {
                                    string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                    propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                }
                                
                                JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                {
                                    string protectionStatusInstance = ((string)protectionStatusValue);
                                    propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                }
                                
                                JToken activeLocationValue = propertiesValue["activeLocation"];
                                if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                {
                                    string activeLocationInstance = ((string)activeLocationValue);
                                    propertiesInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                {
                                    string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                    propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                    {
                                        AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                        propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                        
                                        JToken operationValue = allowedOperationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            allowedOperationsInstance.Operation = operationInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                {
                                    string replicationHealthInstance = ((string)replicationHealthValue);
                                    propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                    {
                                        HealthError healthErrorInstance = new HealthError();
                                        propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                        
                                        JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                        if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                        {
                                            string errorLevelInstance = ((string)errorLevelValue);
                                            healthErrorInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                        {
                                            string errorCodeInstance = ((string)errorCodeValue);
                                            healthErrorInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            healthErrorInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                        if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                        {
                                            string possibleCausesInstance = ((string)possibleCausesValue);
                                            healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                        if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                        {
                                            string recommendedActionInstance = ((string)recommendedActionValue);
                                            healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                        if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                            healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                        if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                            healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                        }
                                        
                                        JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                        if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                        {
                                            string entityIdInstance = ((string)entityIdValue);
                                            healthErrorInstance.EntityId = entityIdInstance;
                                        }
                                    }
                                }
                                
                                JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                {
                                    string replicationProviderInstance = ((string)replicationProviderValue);
                                    propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                JToken policyIdValue = propertiesValue["policyId"];
                                if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                {
                                    string policyIdInstance = ((string)policyIdValue);
                                    propertiesInstance.PolicyID = policyIdInstance;
                                }
                                
                                JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                {
                                    string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                    propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                }
                                
                                JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                }
                                
                                JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                    propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                }
                                
                                JToken currentScenarioValue = propertiesValue["currentScenario"];
                                if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                {
                                    string currentScenarioInstance = ((string)currentScenarioValue);
                                    propertiesInstance.CurrentScenario = currentScenarioInstance;
                                }
                                
                                JToken customSettingValue = propertiesValue["customSetting"];
                                if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)customSettingValue["__type"]);
                                    if (typeName == "HyperVReplicaProviderSpecificSettings")
                                    {
                                        HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                        
                                        JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                            hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                        }
                                        
                                        JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                        if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                            {
                                                DiskDetails diskDetailsInstance = new DiskDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                
                                                JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                    diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                }
                                                
                                                JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                {
                                                    string vHDStatusInstance = ((string)vHDStatusValue);
                                                    diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                }
                                                
                                                JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                {
                                                    string vHDIdInstance = ((string)vHDIdValue);
                                                    diskDetailsInstance.VHDId = vHDIdInstance;
                                                }
                                                
                                                JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                {
                                                    string vHDNameInstance = ((string)vHDNameValue);
                                                    diskDetailsInstance.VHDName = vHDNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                            {
                                                HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                    hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                    }
                                    if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                    {
                                        HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                        
                                        JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                        if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                        {
                                            AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                            
                                            JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                            {
                                                string osTypeInstance = ((string)osTypeValue);
                                                azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                            }
                                            
                                            JToken disksArray = azureVMDiskDetailsValue["disks"];
                                            if (disksArray != null && disksArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken disksValue in ((JArray)disksArray))
                                                {
                                                    VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                    azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                    
                                                    JToken idValue = disksValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        virtualHardDiskInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = disksValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualHardDiskInstance.Name = nameInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                            if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                            {
                                                string osDiskInstance = ((string)osDiskValue);
                                                azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                            }
                                            
                                            JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                            if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                            {
                                                string vHDIdInstance2 = ((string)vHDIdValue2);
                                                azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                            }
                                            
                                            JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                            if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                            {
                                                ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                            }
                                        }
                                        
                                        JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                        if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                        }
                                        
                                        JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                        if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                        {
                                            string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                        }
                                        
                                        JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                        if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                        {
                                            string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                        }
                                        
                                        JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                        if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                        {
                                            string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                            hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                        }
                                        
                                        JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                        if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                            {
                                                HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                
                                                JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                    hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                }
                                            }
                                        }
                                        propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                replicationProtectedItemInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                replicationProtectedItemInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                replicationProtectedItemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                replicationProtectedItemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken locationValue2 = responseDoc["Location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken retryAfterValue = responseDoc["RetryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                int retryAfterInstance = ((int)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken asyncOperationValue = responseDoc["AsyncOperation"];
                            if (asyncOperationValue != null && asyncOperationValue.Type != JTokenType.Null)
                            {
                                string asyncOperationInstance = ((string)asyncOperationValue);
                                result.AsyncOperation = asyncOperationInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public async Task<ReplicationProtectedItemListResponse> ListAsync(string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (protectionContainerName == null)
            {
                throw new ArgumentNullException("protectionContainerName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(this.Client.ResourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/replicationFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/replicationProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerName);
            url = url + "/replicationProtectedItems";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-11-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ReplicationProtectedItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ReplicationProtectedItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ReplicationProtectedItem replicationProtectedItemInstance = new ReplicationProtectedItem();
                                    result.ReplicationProtectedItems.Add(replicationProtectedItemInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ReplicationProtectedItemProperties propertiesInstance = new ReplicationProtectedItemProperties();
                                        replicationProtectedItemInstance.Properties = propertiesInstance;
                                        
                                        JToken friendlyNameValue = propertiesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            propertiesInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken protectedItemTypeValue = propertiesValue["protectedItemType"];
                                        if (protectedItemTypeValue != null && protectedItemTypeValue.Type != JTokenType.Null)
                                        {
                                            string protectedItemTypeInstance = ((string)protectedItemTypeValue);
                                            propertiesInstance.ProtectedItemType = protectedItemTypeInstance;
                                        }
                                        
                                        JToken protectedItemSourceIdValue = propertiesValue["protectedItemSourceId"];
                                        if (protectedItemSourceIdValue != null && protectedItemSourceIdValue.Type != JTokenType.Null)
                                        {
                                            string protectedItemSourceIdInstance = ((string)protectedItemSourceIdValue);
                                            propertiesInstance.ProtectedItemSourceId = protectedItemSourceIdInstance;
                                        }
                                        
                                        JToken recoveryProviderNameValue = propertiesValue["recoveryProviderName"];
                                        if (recoveryProviderNameValue != null && recoveryProviderNameValue.Type != JTokenType.Null)
                                        {
                                            string recoveryProviderNameInstance = ((string)recoveryProviderNameValue);
                                            propertiesInstance.RecoveryServicesProviderName = recoveryProviderNameInstance;
                                        }
                                        
                                        JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                        if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string protectionStatusInstance = ((string)protectionStatusValue);
                                            propertiesInstance.ProtectionStatus = protectionStatusInstance;
                                        }
                                        
                                        JToken activeLocationValue = propertiesValue["activeLocation"];
                                        if (activeLocationValue != null && activeLocationValue.Type != JTokenType.Null)
                                        {
                                            string activeLocationInstance = ((string)activeLocationValue);
                                            propertiesInstance.ActiveLocation = activeLocationInstance;
                                        }
                                        
                                        JToken testFailoverStateDescriptionValue = propertiesValue["testFailoverStateDescription"];
                                        if (testFailoverStateDescriptionValue != null && testFailoverStateDescriptionValue.Type != JTokenType.Null)
                                        {
                                            string testFailoverStateDescriptionInstance = ((string)testFailoverStateDescriptionValue);
                                            propertiesInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                        }
                                        
                                        JToken allowedOperationsArray = propertiesValue["allowedOperations"];
                                        if (allowedOperationsArray != null && allowedOperationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedOperationsValue in ((JArray)allowedOperationsArray))
                                            {
                                                AllowedOperations allowedOperationsInstance = new AllowedOperations();
                                                propertiesInstance.AllowedOperations.Add(allowedOperationsInstance);
                                                
                                                JToken operationValue = allowedOperationsValue["operation"];
                                                if (operationValue != null && operationValue.Type != JTokenType.Null)
                                                {
                                                    string operationInstance = ((string)operationValue);
                                                    allowedOperationsInstance.Operation = operationInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationHealthValue = propertiesValue["replicationHealth"];
                                        if (replicationHealthValue != null && replicationHealthValue.Type != JTokenType.Null)
                                        {
                                            string replicationHealthInstance = ((string)replicationHealthValue);
                                            propertiesInstance.ReplicationHealth = replicationHealthInstance;
                                        }
                                        
                                        JToken replicationHealthErrorsArray = propertiesValue["replicationHealthErrors"];
                                        if (replicationHealthErrorsArray != null && replicationHealthErrorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken replicationHealthErrorsValue in ((JArray)replicationHealthErrorsArray))
                                            {
                                                HealthError healthErrorInstance = new HealthError();
                                                propertiesInstance.ReplicationHealthErrors.Add(healthErrorInstance);
                                                
                                                JToken errorLevelValue = replicationHealthErrorsValue["errorLevel"];
                                                if (errorLevelValue != null && errorLevelValue.Type != JTokenType.Null)
                                                {
                                                    string errorLevelInstance = ((string)errorLevelValue);
                                                    healthErrorInstance.ErrorLevel = errorLevelInstance;
                                                }
                                                
                                                JToken errorCodeValue = replicationHealthErrorsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    healthErrorInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken errorMessageValue = replicationHealthErrorsValue["errorMessage"];
                                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string errorMessageInstance = ((string)errorMessageValue);
                                                    healthErrorInstance.ErrorMessage = errorMessageInstance;
                                                }
                                                
                                                JToken possibleCausesValue = replicationHealthErrorsValue["possibleCauses"];
                                                if (possibleCausesValue != null && possibleCausesValue.Type != JTokenType.Null)
                                                {
                                                    string possibleCausesInstance = ((string)possibleCausesValue);
                                                    healthErrorInstance.PossibleCauses = possibleCausesInstance;
                                                }
                                                
                                                JToken recommendedActionValue = replicationHealthErrorsValue["recommendedAction"];
                                                if (recommendedActionValue != null && recommendedActionValue.Type != JTokenType.Null)
                                                {
                                                    string recommendedActionInstance = ((string)recommendedActionValue);
                                                    healthErrorInstance.RecommendedAction = recommendedActionInstance;
                                                }
                                                
                                                JToken creationTimeUtcValue = replicationHealthErrorsValue["creationTimeUtc"];
                                                if (creationTimeUtcValue != null && creationTimeUtcValue.Type != JTokenType.Null)
                                                {
                                                    string creationTimeUtcInstance = ((string)creationTimeUtcValue);
                                                    healthErrorInstance.CreationTimeUtc = creationTimeUtcInstance;
                                                }
                                                
                                                JToken recoveryProviderErrorMessageValue = replicationHealthErrorsValue["recoveryProviderErrorMessage"];
                                                if (recoveryProviderErrorMessageValue != null && recoveryProviderErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryProviderErrorMessageInstance = ((string)recoveryProviderErrorMessageValue);
                                                    healthErrorInstance.RecoveryProviderErrorMessage = recoveryProviderErrorMessageInstance;
                                                }
                                                
                                                JToken entityIdValue = replicationHealthErrorsValue["entityId"];
                                                if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                                {
                                                    string entityIdInstance = ((string)entityIdValue);
                                                    healthErrorInstance.EntityId = entityIdInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken replicationProviderValue = propertiesValue["replicationProvider"];
                                        if (replicationProviderValue != null && replicationProviderValue.Type != JTokenType.Null)
                                        {
                                            string replicationProviderInstance = ((string)replicationProviderValue);
                                            propertiesInstance.ReplicationProvider = replicationProviderInstance;
                                        }
                                        
                                        JToken policyIdValue = propertiesValue["policyId"];
                                        if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                        {
                                            string policyIdInstance = ((string)policyIdValue);
                                            propertiesInstance.PolicyID = policyIdInstance;
                                        }
                                        
                                        JToken policyFriendlyNameValue = propertiesValue["policyFriendlyName"];
                                        if (policyFriendlyNameValue != null && policyFriendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string policyFriendlyNameInstance = ((string)policyFriendlyNameValue);
                                            propertiesInstance.PolicyFriendlyName = policyFriendlyNameInstance;
                                        }
                                        
                                        JToken lastSuccessfulFailoverTimeValue = propertiesValue["lastSuccessfulFailoverTime"];
                                        if (lastSuccessfulFailoverTimeValue != null && lastSuccessfulFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastSuccessfulFailoverTimeInstance = ((string)lastSuccessfulFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulFailoverTime = lastSuccessfulFailoverTimeInstance;
                                        }
                                        
                                        JToken lastSuccessfulTestFailoverTimeValue = propertiesValue["lastSuccessfulTestFailoverTime"];
                                        if (lastSuccessfulTestFailoverTimeValue != null && lastSuccessfulTestFailoverTimeValue.Type != JTokenType.Null)
                                        {
                                            string lastSuccessfulTestFailoverTimeInstance = ((string)lastSuccessfulTestFailoverTimeValue);
                                            propertiesInstance.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTimeInstance;
                                        }
                                        
                                        JToken currentScenarioValue = propertiesValue["currentScenario"];
                                        if (currentScenarioValue != null && currentScenarioValue.Type != JTokenType.Null)
                                        {
                                            string currentScenarioInstance = ((string)currentScenarioValue);
                                            propertiesInstance.CurrentScenario = currentScenarioInstance;
                                        }
                                        
                                        JToken customSettingValue = propertiesValue["customSetting"];
                                        if (customSettingValue != null && customSettingValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)customSettingValue["__type"]);
                                            if (typeName == "HyperVReplicaProviderSpecificSettings")
                                            {
                                                HyperVReplicaProviderSpecificSettings hyperVReplicaProviderSpecificSettingsInstance = new HyperVReplicaProviderSpecificSettings();
                                                
                                                JToken lastReplicatedTimeValue = customSettingValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue != null && lastReplicatedTimeValue.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance = ((string)lastReplicatedTimeValue);
                                                    hyperVReplicaProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance;
                                                }
                                                
                                                JToken vMDiskDetailsArray = customSettingValue["vMDiskDetails"];
                                                if (vMDiskDetailsArray != null && vMDiskDetailsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken vMDiskDetailsValue in ((JArray)vMDiskDetailsArray))
                                                    {
                                                        DiskDetails diskDetailsInstance = new DiskDetails();
                                                        hyperVReplicaProviderSpecificSettingsInstance.VMDiskDetails.Add(diskDetailsInstance);
                                                        
                                                        JToken maxSizeMBValue = vMDiskDetailsValue["maxSizeMB"];
                                                        if (maxSizeMBValue != null && maxSizeMBValue.Type != JTokenType.Null)
                                                        {
                                                            ulong maxSizeMBInstance = ((ulong)maxSizeMBValue);
                                                            diskDetailsInstance.MaxSizeMB = maxSizeMBInstance;
                                                        }
                                                        
                                                        JToken vHDStatusValue = vMDiskDetailsValue["vHDStatus"];
                                                        if (vHDStatusValue != null && vHDStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string vHDStatusInstance = ((string)vHDStatusValue);
                                                            diskDetailsInstance.VHDStatus = vHDStatusInstance;
                                                        }
                                                        
                                                        JToken vHDIdValue = vMDiskDetailsValue["vHDId"];
                                                        if (vHDIdValue != null && vHDIdValue.Type != JTokenType.Null)
                                                        {
                                                            string vHDIdInstance = ((string)vHDIdValue);
                                                            diskDetailsInstance.VHDId = vHDIdInstance;
                                                        }
                                                        
                                                        JToken vHDNameValue = vMDiskDetailsValue["vHDName"];
                                                        if (vHDNameValue != null && vHDNameValue.Type != JTokenType.Null)
                                                        {
                                                            string vHDNameInstance = ((string)vHDNameValue);
                                                            diskDetailsInstance.VHDName = vHDNameInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken networkPropertiesArray = customSettingValue["networkProperties"];
                                                if (networkPropertiesArray != null && networkPropertiesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken networkPropertiesValue in ((JArray)networkPropertiesArray))
                                                    {
                                                        HyperVReplicaProviderNetworkDetails hyperVReplicaProviderNetworkDetailsInstance = new HyperVReplicaProviderNetworkDetails();
                                                        hyperVReplicaProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaProviderNetworkDetailsInstance);
                                                        
                                                        JToken networkInterfaceTypeValue = networkPropertiesValue["networkInterfaceType"];
                                                        if (networkInterfaceTypeValue != null && networkInterfaceTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string networkInterfaceTypeInstance = ((string)networkInterfaceTypeValue);
                                                            hyperVReplicaProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.CustomSettings = hyperVReplicaProviderSpecificSettingsInstance;
                                            }
                                            if (typeName == "HyperVReplicaAzureProviderSpecificSettings")
                                            {
                                                HyperVReplicaAzureProviderSpecificSettings hyperVReplicaAzureProviderSpecificSettingsInstance = new HyperVReplicaAzureProviderSpecificSettings();
                                                
                                                JToken azureVMDiskDetailsValue = customSettingValue["azureVMDiskDetails"];
                                                if (azureVMDiskDetailsValue != null && azureVMDiskDetailsValue.Type != JTokenType.Null)
                                                {
                                                    AzureVmDiskDetails azureVMDiskDetailsInstance = new AzureVmDiskDetails();
                                                    hyperVReplicaAzureProviderSpecificSettingsInstance.AzureVMDiskDetails = azureVMDiskDetailsInstance;
                                                    
                                                    JToken osTypeValue = azureVMDiskDetailsValue["osType"];
                                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string osTypeInstance = ((string)osTypeValue);
                                                        azureVMDiskDetailsInstance.OsType = osTypeInstance;
                                                    }
                                                    
                                                    JToken disksArray = azureVMDiskDetailsValue["disks"];
                                                    if (disksArray != null && disksArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken disksValue in ((JArray)disksArray))
                                                        {
                                                            VirtualHardDisk virtualHardDiskInstance = new VirtualHardDisk();
                                                            azureVMDiskDetailsInstance.Disks.Add(virtualHardDiskInstance);
                                                            
                                                            JToken idValue = disksValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                virtualHardDiskInstance.Id = idInstance;
                                                            }
                                                            
                                                            JToken nameValue = disksValue["name"];
                                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance = ((string)nameValue);
                                                                virtualHardDiskInstance.Name = nameInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken osDiskValue = azureVMDiskDetailsValue["osDisk"];
                                                    if (osDiskValue != null && osDiskValue.Type != JTokenType.Null)
                                                    {
                                                        string osDiskInstance = ((string)osDiskValue);
                                                        azureVMDiskDetailsInstance.OsDisk = osDiskInstance;
                                                    }
                                                    
                                                    JToken vHDIdValue2 = azureVMDiskDetailsValue["vHDId"];
                                                    if (vHDIdValue2 != null && vHDIdValue2.Type != JTokenType.Null)
                                                    {
                                                        string vHDIdInstance2 = ((string)vHDIdValue2);
                                                        azureVMDiskDetailsInstance.VHDId = vHDIdInstance2;
                                                    }
                                                    
                                                    JToken maxSizeMBValue2 = azureVMDiskDetailsValue["maxSizeMB"];
                                                    if (maxSizeMBValue2 != null && maxSizeMBValue2.Type != JTokenType.Null)
                                                    {
                                                        ulong maxSizeMBInstance2 = ((ulong)maxSizeMBValue2);
                                                        azureVMDiskDetailsInstance.MaxSizeMB = maxSizeMBInstance2;
                                                    }
                                                }
                                                
                                                JToken recoveryAzureVMNameValue = customSettingValue["recoveryAzureVMName"];
                                                if (recoveryAzureVMNameValue != null && recoveryAzureVMNameValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMNameInstance = ((string)recoveryAzureVMNameValue);
                                                    hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMName = recoveryAzureVMNameInstance;
                                                }
                                                
                                                JToken recoveryAzureVMSizeValue = customSettingValue["recoveryAzureVMSize"];
                                                if (recoveryAzureVMSizeValue != null && recoveryAzureVMSizeValue.Type != JTokenType.Null)
                                                {
                                                    string recoveryAzureVMSizeInstance = ((string)recoveryAzureVMSizeValue);
                                                    hyperVReplicaAzureProviderSpecificSettingsInstance.RecoveryAzureVMSize = recoveryAzureVMSizeInstance;
                                                }
                                                
                                                JToken selectedRecoveryAzureNetworkIdValue = customSettingValue["selectedRecoveryAzureNetworkId"];
                                                if (selectedRecoveryAzureNetworkIdValue != null && selectedRecoveryAzureNetworkIdValue.Type != JTokenType.Null)
                                                {
                                                    string selectedRecoveryAzureNetworkIdInstance = ((string)selectedRecoveryAzureNetworkIdValue);
                                                    hyperVReplicaAzureProviderSpecificSettingsInstance.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkIdInstance;
                                                }
                                                
                                                JToken lastReplicatedTimeValue2 = customSettingValue["lastReplicatedTime"];
                                                if (lastReplicatedTimeValue2 != null && lastReplicatedTimeValue2.Type != JTokenType.Null)
                                                {
                                                    string lastReplicatedTimeInstance2 = ((string)lastReplicatedTimeValue2);
                                                    hyperVReplicaAzureProviderSpecificSettingsInstance.LastReplicatedTime = lastReplicatedTimeInstance2;
                                                }
                                                
                                                JToken networkPropertiesArray2 = customSettingValue["networkProperties"];
                                                if (networkPropertiesArray2 != null && networkPropertiesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken networkPropertiesValue2 in ((JArray)networkPropertiesArray2))
                                                    {
                                                        HyperVReplicaAzureProviderNetworkDetails hyperVReplicaAzureProviderNetworkDetailsInstance = new HyperVReplicaAzureProviderNetworkDetails();
                                                        hyperVReplicaAzureProviderSpecificSettingsInstance.NetworkDetails.Add(hyperVReplicaAzureProviderNetworkDetailsInstance);
                                                        
                                                        JToken networkInterfaceTypeValue2 = networkPropertiesValue2["networkInterfaceType"];
                                                        if (networkInterfaceTypeValue2 != null && networkInterfaceTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string networkInterfaceTypeInstance2 = ((string)networkInterfaceTypeValue2);
                                                            hyperVReplicaAzureProviderNetworkDetailsInstance.NetworkInterfaceType = networkInterfaceTypeInstance2;
                                                        }
                                                    }
                                                }
                                                propertiesInstance.CustomSettings = hyperVReplicaAzureProviderSpecificSettingsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        replicationProtectedItemInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        replicationProtectedItemInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        replicationProtectedItemInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        replicationProtectedItemInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            replicationProtectedItemInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Execute planned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Planned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> PlannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, PlannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "PlannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginPlannedFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetPlannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute reprotect for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Reprotect input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> ReprotectAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, ReverseReplicationInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ReprotectAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginReprotectAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetReprotectStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute Test failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Test failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, TestFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TestFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginTestFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetTestFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Execute unplanned failover for the given Replication protected item.
        /// </summary>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item name.
        /// </param>
        /// <param name='input'>
        /// Required. Unplanned failover input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> UnplannedFailoverAsync(string fabricName, string protectionContainerName, string replicationProtectedItemName, UnplannedFailoverInput input, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            SiteRecoveryManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("protectionContainerName", protectionContainerName);
                tracingParameters.Add("replicationProtectedItemName", replicationProtectedItemName);
                tracingParameters.Add("input", input);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UnplannedFailoverAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.ReplicationProtectedItem.BeginUnplannedFailoverAsync(fabricName, protectionContainerName, replicationProtectedItemName, input, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            ReplicationProtectedItemOperationResponse result = await client.ReplicationProtectedItem.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ReplicationProtectedItem.GetUnplannedFailoverStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
