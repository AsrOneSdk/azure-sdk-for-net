// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.SiteRecovery;
using Microsoft.Azure.Management.SiteRecovery.Models;

namespace Microsoft.Azure.Management.SiteRecovery
{
    public static partial class ReplicationProtectedItemOperationsExtensions
    {
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginDisableProtection(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).BeginDisableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginDisableProtectionAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginDisableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse BeginEnableProtection(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).BeginEnableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> BeginEnableProtectionAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginEnableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse DisableProtection(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).DisableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Disable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Disable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> DisableProtectionAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, DisableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.DisableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse EnableProtection(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).EnableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Enable Protection for the given Replication protected item.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container name.
        /// </param>
        /// <param name='input'>
        /// Required. Enable protection input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> EnableProtectionAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, EnableProtectionInput input, CustomRequestHeaders customRequestHeaders)
        {
            return operations.EnableProtectionAsync(fabricName, protectionContainerName, input, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public static ReplicationProtectedItemResponse Get(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).GetAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='replicationProtectedItemName'>
        /// Required. Replication protected item unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the fabric object
        /// </returns>
        public static Task<ReplicationProtectedItemResponse> GetAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, string replicationProtectedItemName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetAsync(fabricName, protectionContainerName, replicationProtectedItemName, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static LongRunningOperationResponse GetDisableStatus(this IReplicationProtectedItemOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).GetDisableStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public static Task<LongRunningOperationResponse> GetDisableStatusAsync(this IReplicationProtectedItemOperations operations, string operationStatusLink)
        {
            return operations.GetDisableStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Service response for enable DR operation.
        /// </returns>
        public static EnableProtectionResponse GetEnableStatus(this IReplicationProtectedItemOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).GetEnableStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Service response for enable DR operation.
        /// </returns>
        public static Task<EnableProtectionResponse> GetEnableStatusAsync(this IReplicationProtectedItemOperations operations, string operationStatusLink)
        {
            return operations.GetEnableStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public static ReplicationProtectedItemListResponse List(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReplicationProtectedItemOperations)s).ListAsync(fabricName, protectionContainerName, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the replication protected object by Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.SiteRecovery.IReplicationProtectedItemOperations.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric unique name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Required. Protection container unique name.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// The response model for the list replicated protected items.
        /// </returns>
        public static Task<ReplicationProtectedItemListResponse> ListAsync(this IReplicationProtectedItemOperations operations, string fabricName, string protectionContainerName, CustomRequestHeaders customRequestHeaders)
        {
            return operations.ListAsync(fabricName, protectionContainerName, customRequestHeaders, CancellationToken.None);
        }
    }
}
